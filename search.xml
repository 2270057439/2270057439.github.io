<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java多线程机制</title>
      <link href="/2020/06/03/xian-cheng/"/>
      <url>/2020/06/03/xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="第十二部分：多线程"><a href="#第十二部分：多线程" class="headerlink" title="第十二部分：多线程"></a>第十二部分：多线程</h1><h2 id="一、进程与线程"><a href="#一、进程与线程" class="headerlink" title="一、进程与线程"></a>一、进程与线程</h2><h3 id="1-进程"><a href="#1-进程" class="headerlink" title="1. 进程"></a>1. 进程</h3><p>Java 为每个运行的程序开启一个进程，即：进程是应用程序的执行示例。进程有独立的内存空间和系统资源，是资源分配的最小单位。</p><h3 id="2-线程"><a href="#2-线程" class="headerlink" title="2. 线程"></a>2. 线程</h3><p>线程是进程中执行运算的最小单位，可完成一个独立的顺序控制流程。一个进程中的所有线程共享进程的资源，除了CPU 时间，也就是说，线程是 CPU 调度和分配的最小单位。</p><h3 id="3-多线程"><a href="#3-多线程" class="headerlink" title="3. 多线程"></a>3. 多线程</h3><p><strong>多线程：</strong> 如果在一个进程中同时运行了多个线程，用来完成不同的工作，则称之为“多线程”；多个线程交替占用CPU资源，而非真正的并行执行。</p><h4 id="多线程好处"><a href="#多线程好处" class="headerlink" title="多线程好处"></a>多线程好处</h4><ul><li>充分利用CPU的资源</li><li>简化编程模型</li><li>带来良好的用户体验</li></ul><h3 id="4-主线程"><a href="#4-主线程" class="headerlink" title="4. 主线程"></a>4. 主线程</h3><ol><li>main()方法即为主线程入口</li><li>产生其他子线程的线程</li><li>必须最后完成执行，因为它执行各种关闭动作</li></ol><pre class="line-numbers language-bash"><code class="language-bash">// 获得主线程对象Thread t<span class="token operator">=</span> Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 获取线程名System.out.println<span class="token punctuation">(</span><span class="token string">"当前线程是: "</span>+t.getName<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>// 设置线程名t.setName<span class="token punctuation">(</span><span class="token string">"MyJavaThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System.out.println<span class="token punctuation">(</span><span class="token string">"当前线程名是: "</span>+t.getName<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、多线程的实现"><a href="#二、多线程的实现" class="headerlink" title="二、多线程的实现"></a>二、多线程的实现</h2><h3 id="1-使用线程的步骤"><a href="#1-使用线程的步骤" class="headerlink" title="1. 使用线程的步骤"></a>1. 使用线程的步骤</h3><ol><li>定义线程</li><li>创建线程对象</li><li>启动线程</li><li>终止线程</li></ol><h3 id="2-继承-Thread-类创建线程"><a href="#2-继承-Thread-类创建线程" class="headerlink" title="2. 继承 Thread 类创建线程"></a>2. 继承 Thread 类创建线程</h3><ol><li>定义 MyThread 类继承 Thread 类</li><li>重写 run() 方法，编写线程执行体</li><li>创建线程对象，调用 start() 方法启动线程</li></ol><h4 id="多线程交替执行"><a href="#多线程交替执行" class="headerlink" title="多线程交替执行"></a>多线程交替执行</h4><pre class="line-numbers language-bash"><code class="language-bash">Demo02_Thread thread <span class="token operator">=</span> new Demo02_Thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Demo02_Thread thread2 <span class="token operator">=</span> new Demo02_Thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //创建新线程thread2thread.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread2.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //启动thread2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线程应该-start-而不能直接调用-run"><a href="#线程应该-start-而不能直接调用-run" class="headerlink" title="线程应该 start() 而不能直接调用 run()"></a>线程应该 start() 而不能直接调用 run()</h4><p><img src="https://pan-le.cn/medias/pebble/loading.gif" data-original="/medias/%E7%BA%BF%E7%A8%8B/start_thread.png" alt></p><h3 id="3-实现-Runnable-接口创建进程"><a href="#3-实现-Runnable-接口创建进程" class="headerlink" title="3. 实现 Runnable 接口创建进程"></a>3. 实现 Runnable 接口创建进程</h3><ol><li>实现 Runnable 接口</li><li>创建 Thread 对象，传入 Runnable 对象</li><li>启动线程</li></ol><pre class="line-numbers language-bash"><code class="language-bash">class Demo04_Runnable <span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Runnable runnable <span class="token operator">=</span> new MyRunnable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> new Thread<span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>class MyRunnable implements Runnable <span class="token punctuation">{</span>    // 实现run<span class="token punctuation">(</span><span class="token punctuation">)</span>方法    public void run<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 1<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 100<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span>Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">":"</span> + i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-比较两种创建线程的方式"><a href="#4-比较两种创建线程的方式" class="headerlink" title="4. 比较两种创建线程的方式"></a>4. 比较两种创建线程的方式</h3><h4 id="I-继承-Thread-类"><a href="#I-继承-Thread-类" class="headerlink" title="I. 继承 Thread 类"></a>I. 继承 Thread 类</h4><ul><li>编写简单，可直接操作线程</li><li>适用于单继承</li></ul><h4 id="II-实现-Runnable-接口-推荐使用"><a href="#II-实现-Runnable-接口-推荐使用" class="headerlink" title="II. 实现 Runnable 接口(推荐使用)"></a>II. 实现 Runnable 接口(推荐使用)</h4><ul><li>避免单继承局限性</li><li>便于共享资源</li></ul><h2 id="三、线程状态"><a href="#三、线程状态" class="headerlink" title="三、线程状态"></a>三、线程状态</h2><h3 id="1-线程状态转换图"><a href="#1-线程状态转换图" class="headerlink" title="1. 线程状态转换图"></a>1. 线程状态转换图</h3><p><img src="https://pan-le.cn/medias/pebble/loading.gif" data-original="/medias/%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.jpg" alt="状态转换图"></p><h2 id="四、线程调度"><a href="#四、线程调度" class="headerlink" title="四、线程调度"></a>四、线程调度</h2><h3 id="1-线程调度"><a href="#1-线程调度" class="headerlink" title="1. 线程调度"></a>1. 线程调度</h3><p><strong>线程调度：</strong> 指按照特定机制为多个线程分配 CPU 的使用权。<br>线程调度方法：<br><img src="https://pan-le.cn/medias/pebble/loading.gif" data-original="/medias/%E7%BA%BF%E7%A8%8B/methods.png" alt="线程调度方法"></p><h3 id="2-线程优先级"><a href="#2-线程优先级" class="headerlink" title="2. 线程优先级"></a>2. 线程优先级</h3><p><code>线程的优先级</code><br><code>线程优先级由1~10表示，1最低，默认优先级为5</code><br><code>优先级高的线程获得CPU资源的概率较大</code></p><pre class="line-numbers language-bash"><code class="language-bash">t1.setPriority<span class="token punctuation">(</span>Thread.MAX_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>t2.setPriority<span class="token punctuation">(</span>Thread.MIN_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-线程休眠"><a href="#3-线程休眠" class="headerlink" title="3. 线程休眠"></a>3. 线程休眠</h3><p><code>线程休眠 sleep()</code><br><code>让线程暂时睡眠指定时长，线程进入阻塞状态</code><br><code>睡眠时间过后线程会再进入可运行状态</code></p><pre class="line-numbers language-bash"><code class="language-bash">try <span class="token punctuation">{</span>    Thread.sleep<span class="token punctuation">(</span>1000<span class="token punctuation">)</span><span class="token punctuation">;</span> // 睡眠1秒<span class="token punctuation">}</span> catch <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-线程的强制运行"><a href="#4-线程的强制运行" class="headerlink" title="4. 线程的强制运行"></a>4. 线程的强制运行</h3><p><code>线程的强制运行 join()</code><br><code>使当前线程暂停执行，等待其他线程结束后再继续执行本线程</code><br><code>需处理InterruptedException异常</code></p><p><img src="https://pan-le.cn/medias/pebble/loading.gif" data-original="/medias/%E7%BA%BF%E7%A8%8B/join.png" alt="join"><br><strong>注：</strong></p><ul><li>millis:以毫秒为单位的等待时长</li><li>nanos:要等待的附加纳秒时长</li></ul><pre class="line-numbers language-bash"><code class="language-bash">try <span class="token punctuation">{</span>    // 阻塞主线程，子线程强制执行    temp.join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> catch <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-线程的礼让"><a href="#5-线程的礼让" class="headerlink" title="5. 线程的礼让"></a>5. 线程的礼让</h3><p><code>线程的礼让 yield()</code><br><code>暂停当前线程，允许其他具有相同优先级的线程获得运行机会</code><br><code>该线程处于就绪状态，不转为阻塞状态</code><br><code>public static void yield()</code></p><p><strong>注：</strong> 只是提供一种可能，但是不能保证一定会实现礼让</p><h2 id="五、线程同步"><a href="#五、线程同步" class="headerlink" title="五、线程同步"></a>五、线程同步</h2><p><strong>问题：</strong> 多线程实现网络购票，用户提交购票信息后<br>第一步：网站修改网站车票数据<br>第二步：显示出票反馈信息给用户</p><h3 id="1-线程不安全的抢票代码"><a href="#1-线程不安全的抢票代码" class="headerlink" title="1. 线程不安全的抢票代码"></a>1. 线程不安全的抢票代码</h3><pre class="line-numbers language-bash"><code class="language-bash">public class Test01_unsafty <span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        // 车站售票点        Site_unsafty site <span class="token operator">=</span> new Site_unsafty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        // 每个线程就是一个抢票的人        Thread person1 <span class="token operator">=</span> new Thread<span class="token punctuation">(</span>site, <span class="token string">"桃跑跑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread person2 <span class="token operator">=</span> new Thread<span class="token punctuation">(</span>site, <span class="token string">"抢票代理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread person3 <span class="token operator">=</span> new Thread<span class="token punctuation">(</span>site, <span class="token string">"黄牛党"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"********开始抢票********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person1.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person2.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person3.start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>class Site_unsafty implements Runnable <span class="token punctuation">{</span>    private int count <span class="token operator">=</span> 10<span class="token punctuation">;</span> // 记录剩余票数    private int num <span class="token operator">=</span> 0<span class="token punctuation">;</span> // 记录买到第几张票    public void run<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span>            // 没有余票时，跳出循环            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            // 第一步：修改数据            num++<span class="token punctuation">;</span>            count--<span class="token punctuation">;</span>            try <span class="token punctuation">{</span>                Thread.sleep<span class="token punctuation">(</span>500<span class="token punctuation">)</span><span class="token punctuation">;</span> // 模拟网络延时            <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            // 第二步：显示信息            System.out.println<span class="token punctuation">(</span>Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.getName<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"抢到第"</span> + num                    + <span class="token string">"张票，剩余"</span> + count + <span class="token string">"张票！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>线程同步问题：</strong> 多个线程操作同一共享资源时，将引发数据不安全问题。</p><h3 id="2-使用同步代码块解决同步问题"><a href="#2-使用同步代码块解决同步问题" class="headerlink" title="2. 使用同步代码块解决同步问题"></a>2. 使用同步代码块解决同步问题</h3><p><strong>语法：</strong></p><pre class="line-numbers language-bash"><code class="language-bash">synchronized<span class="token punctuation">(</span>锁对象<span class="token punctuation">)</span><span class="token punctuation">{</span>    // 同步代码块<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>锁的含义：通过锁将一段代码锁定。锁是一个对象，进入锁定的同步代码块，线程要首先持有该锁，只有持有锁的线程可以执行该代码，执行完毕，释放锁；然后，锁可以被其他线程拿到。锁可以是任意对象。</p><h3 id="3-使用同步方法解决同步问题"><a href="#3-使用同步方法解决同步问题" class="headerlink" title="3. 使用同步方法解决同步问题"></a>3. 使用同步方法解决同步问题</h3><p><strong>语法：</strong></p><pre class="line-numbers language-bash"><code class="language-bash">public synchronized void buy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    // 同步代码块<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>同步方法：</strong> 同步方法和同步代码块的作用和内涵是一致的。同步方法即是用当前对象 this 锁定的同步代码块。</p><h3 id="4-线程安全的类型"><a href="#4-线程安全的类型" class="headerlink" title="4. 线程安全的类型"></a>4. 线程安全的类型</h3><ul><li>ArrayList类的add()方法为非同步方法</li><li>当多个线程向同一个ArrayList对象添加数据时，可能出现数据不一致问题<br><img src="https://pan-le.cn/medias/pebble/loading.gif" data-original="/medias/%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%B1%BB%E5%9E%8B.png" alt="线程安全的类型"></li><li><em>为达到安全性和效率的平衡，可以根据实际场景来选择合适的类型*</em></li></ul><h2 id="六、课堂练习"><a href="#六、课堂练习" class="headerlink" title="六、课堂练习"></a>六、课堂练习</h2><ol><li>使用 Thread 创建线程练习<br>需求说明：<ol><li>创建两个子线程，每个线程均输出20次消息数字、“你好”、线程名</li><li>观察多个线程交替执行的过程<br><img src="https://pan-le.cn/medias/pebble/loading.gif" data-original="/medias/%E7%BA%BF%E7%A8%8B/c1.png" alt="c1"></li></ol></li><li>使用 Runnable 创建线程练习<br>需求说明：<br>修改上机练习1，要求线程类使用实现Runnable接口的方式创建，并修改测试类</li><li>模拟多人爬山<br>需求说明:<pre><code> 1. 每个线程代表一个人, 2. 可设置每人爬山速度, 每爬完100米显示信息, 爬到终点时给出相应提示</code></pre>提示：<pre><code> 1. 创建线程类ClimbThread，属性：爬100米时长（time），爬多少个100米（num） 2. 构造方法完成属性初始化 3. 实现run()方法，线程休眠模拟爬山中的延时 4. 实现测试类Test，创建多个线程对象模拟多个人，设置人名、爬100米时长 ![c3](/medias/线程/ex_climb.png)</code></pre></li><li>模拟看病叫号<br>需求说明：<pre><code> 1. 某科室一天需看普通号50个，特需号10个 2. 特需号看病时间是普通号的2倍 3. 开始时普通号和特需号并行叫号，叫到特需号的概率比普通号高 4. 当普通号叫完第10号时，要求先看完全部特需号，再看普通号 5. 使用多线程模拟这一过程 ![叫号](/medias/线程/ex_hospital.png)</code></pre></li><li>模拟多线程网络购票</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件配置</title>
      <link href="/2020/06/02/ruan-jian-pei-zhi/"/>
      <url>/2020/06/02/ruan-jian-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="Sublime-Text配置中文"><a href="#Sublime-Text配置中文" class="headerlink" title="Sublime Text配置中文"></a>Sublime Text配置中文</h2><p>1.下载配置文件<a href="https://pan.baidu.com/s/1soTbFkUsfzm0QGrFYCxbbg" target="_blank" rel="noopener">提取码: 7ru9 </a><br>2.打开<code>Sublime Text-&gt;Preferences-&gt;Browse Packages</code>,然后返回到上层目录。<br>3.将文件导入到<code>Installed Packages</code>即可。</p>]]></content>
      
      
      <categories>
          
          <category> 捣鼓 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacBook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>擦擦你的路由器，绕开校园网的mac地址绑定，实现多设备登陆</title>
      <link href="/2020/06/01/pos-ca-ca-ni-de-lu-you-qi-rao-kai-xiao-yuan-wang-de-mac-di-zhi-bang-ding-shi-xian-duo-she-bei-deng-lu/"/>
      <url>/2020/06/01/pos-ca-ca-ni-de-lu-you-qi-rao-kai-xiao-yuan-wang-de-mac-di-zhi-bang-ding-shi-xian-duo-she-bei-deng-lu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>老牌aircrack-ng跑字典破Wi-Fi</title>
      <link href="/2020/06/01/lao-pai-aircrack-ng-pao-zi-dian-po-wi-fi/"/>
      <url>/2020/06/01/lao-pai-aircrack-ng-pao-zi-dian-po-wi-fi/</url>
      
        <content type="html"><![CDATA[<pre><code>切换目录 cd Desktop/jikefeng/监听周围wifi airport -sc+f键搜索 选中信道开始抓包sudo airport en0 sniff 1c+c停止抓包，进入/bin找到包包和字典放一起开跑aircrack-ng -w jikefeng.txt jikefeng.cap</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pebble-产品总结</title>
      <link href="/2020/05/30/mei-luo-de-zhi-neng-shou-biao-bi-pebble-chan-pin-xian-jie-shao/"/>
      <url>/2020/05/30/mei-luo-de-zhi-neng-shou-biao-bi-pebble-chan-pin-xian-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="一：产品介绍"><a href="#一：产品介绍" class="headerlink" title="一：产品介绍"></a>一：产品介绍</h2><h3 id="1-众筹出道"><a href="#1-众筹出道" class="headerlink" title="1.众筹出道"></a>1.众筹出道</h3><p>2015年2 月底，智能手表厂商 Pebble 于Kickstarter发起了新众筹，离众筹结束还有 24 天，超越之前的众筹冠军 Coolest Cooler，刷新了 Kickstarter 的筹款纪录。</p><h3 id="2-历史及发售价"><a href="#2-历史及发售价" class="headerlink" title="2.历史及发售价"></a>2.历史及发售价</h3><ol><li>2012年：第一代Pebble - 699元<br><img src="https://pan-le.cn/medias/pebble/loading.gif" data-original="/medias/pebble/5.jpeg" alt></li><li>2014年：Pebble Steel（钢铁版peblle,我的第一个pebble）- 1199元<br><img src="https://pan-le.cn/medias/pebble/loading.gif" data-original="/medias/pebble/1.png" alt></li><li>2015年：Pebble Time（1399元） + pebble Time Round（1280元）+ Pebble Time Steel - 1699元<br><img src="https://pan-le.cn/medias/pebble/loading.gif" data-original="/medias/pebble/4.png" alt><br><img src="https://pan-le.cn/medias/pebble/loading.gif" data-original="/medias/pebble/2.jpg" alt></li><li>2016年：新Pebble 2，Time 2，Pebble Core胎死腹中，未能发售。pebble被Fitbit收购。</li></ol><h3 id="3-硬件配置"><a href="#3-硬件配置" class="headerlink" title="3.硬件配置"></a>3.硬件配置</h3><p><img src="https://pan-le.cn/medias/pebble/loading.gif" data-original="/medias/pebble/6.png" alt></p><h2 id="二：表盘"><a href="#二：表盘" class="headerlink" title="二：表盘"></a>二：表盘</h2><h3 id="1-表盘下载"><a href="#1-表盘下载" class="headerlink" title="1.表盘下载"></a>1.表盘下载</h3><p>基于原版<a href="https://apps.rebble.io" title="表盘" target="_blank" rel="noopener">表盘</a> 商店的修改，增加<a href="https://apps.rebble.io?dev_settings=true" title="下载" target="_blank" rel="noopener">下载</a>功能</p><h3 id="2-制作表盘"><a href="#2-制作表盘" class="headerlink" title="2.制作表盘"></a>2.制作表盘</h3><h4 id="2-1在线网页制作表盘"><a href="#2-1在线网页制作表盘" class="headerlink" title="2.1在线网页制作表盘"></a>2.1在线网页制作表盘</h4><p><a href="http://www.watchface-generator.de/index.php" title="点我" target="_blank" rel="noopener">点我</a> </p><h3 id="3-更换pebble服务器，由pebble到rebble。"><a href="#3-更换pebble服务器，由pebble到rebble。" class="headerlink" title="3.更换pebble服务器，由pebble到rebble。"></a>3.更换pebble服务器，由pebble到rebble。</h3><p><a href="http://tieba.baidu.com/p/6123618973?share=9105&fr=share&see_lz=0&sfc=copy&client_type=2&client_version=11.4.8.6&st=1590794609&unique=44F840BD5AAD68B9F62C9D899852F777" title="点我" target="_blank" rel="noopener">点我</a></p>]]></content>
      
      
      <categories>
          
          <category> 设备体验 </category>
          
          <category> 鼓捣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pebble </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>termux/iTerm + nginx反向穿透搭建博客</title>
      <link href="/2020/05/28/termux-iterm-nginx-fan-xiang-chuan-tou-da-jian-bo-ke/"/>
      <url>/2020/05/28/termux-iterm-nginx-fan-xiang-chuan-tou-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器插件汇总</title>
      <link href="/2020/05/28/liu-lan-qi-cha-jian-hui-zong/"/>
      <url>/2020/05/28/liu-lan-qi-cha-jian-hui-zong/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>欧陆字典制作（mdict词典）</title>
      <link href="/2020/05/28/ou-lu-zi-dian-zhi-zuo-mdict-ci-dian/"/>
      <url>/2020/05/28/ou-lu-zi-dian-zhi-zuo-mdict-ci-dian/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>不开放shell的ipad通过Textastic远程访问iTerm</title>
      <link href="/2020/05/28/bu-kai-fang-shell-de-ipad-tong-guo-textastic-yuan-cheng-fang-wen-iterm/"/>
      <url>/2020/05/28/bu-kai-fang-shell-de-ipad-tong-guo-textastic-yuan-cheng-fang-wen-iterm/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac平台Docker容器配合智q实现qq机器人</title>
      <link href="/2020/05/28/mac-ping-tai-docker-rong-qi-pei-he-zhi-q-shi-xian-qq-ji-qi-ren/"/>
      <url>/2020/05/28/mac-ping-tai-docker-rong-qi-pei-he-zhi-q-shi-xian-qq-ji-qi-ren/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Termux操作汇总</title>
      <link href="/2020/05/28/termux-cao-zuo-hui-zong/"/>
      <url>/2020/05/28/termux-cao-zuo-hui-zong/</url>
      
        <content type="html"><![CDATA[<h2 id="一：软件安装"><a href="#一：软件安装" class="headerlink" title="一：软件安装"></a>一：软件安装</h2><h3 id="1-安装clang"><a href="#1-安装clang" class="headerlink" title="1.安装clang"></a>1.安装clang</h3><h4 id="1-1过程"><a href="#1-1过程" class="headerlink" title="1.1过程"></a>1.1过程</h4><p>升级并安装clang编译器和vi:<br><code>bashapt update;apt install clang;apt install vim</code><br><strong>编辑c程序：</strong><br><code>bashvim hello</code><br><strong>编译：</strong><br><code>bashclang hello.c//或者：gcc hello.c -o name.o</code><br><strong>执行生成的编译文件:</strong><br><code>name.o</code></p><h4 id="1-2增加vi中文注释支持"><a href="#1-2增加vi中文注释支持" class="headerlink" title="1.2增加vi中文注释支持"></a>1.2增加vi中文注释支持</h4><p><strong>根目录下修改.vimrc文件</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~ //切换到根vim .vimrc //编辑<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>写入配置信息</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> encoding<span class="token operator">=</span>utf-8<span class="token keyword">set</span> fileencodings<span class="token operator">=</span>ucs-bom,utf-8,cp936,gb18030<span class="token keyword">set</span> termencoding<span class="token operator">=</span>utf-8<span class="token keyword">set</span> expandtab<span class="token keyword">set</span> ts<span class="token operator">=</span>4<span class="token keyword">set</span> shiftwidth<span class="token operator">=</span>4<span class="token keyword">set</span> nusyntax on<span class="token keyword">if</span> has<span class="token punctuation">(</span><span class="token string">'mouse'</span><span class="token punctuation">)</span><span class="token keyword">set</span> mouse-<span class="token operator">=</span>aendif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> 鼓捣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Termux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iTerm配置汇总</title>
      <link href="/2020/05/28/mac-os-chang-jian-cuo-wu-hui-zong/"/>
      <url>/2020/05/28/mac-os-chang-jian-cuo-wu-hui-zong/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>接触shell也有个把年了，过程中遇到了各种各样的问题，此文章慢慢更新，记录一些常见的错误以及出现问题的解决办法。</p><h2 id="简单命令"><a href="#简单命令" class="headerlink" title="简单命令"></a>简单命令</h2><h3 id="换shell"><a href="#换shell" class="headerlink" title="换shell"></a>换shell</h3><p><code>chsh -s /usr/local/bin/zsh</code></p><h2 id="安装ADB调试桥，以使用冰箱。"><a href="#安装ADB调试桥，以使用冰箱。" class="headerlink" title="安装ADB调试桥，以使用冰箱。"></a>安装ADB调试桥，以使用冰箱。</h2><p>1.安装<br>输入<code>adb</code>检查是否已经安装。若显示没安装<br>则：</p><blockquote><p>仅仅需要一个<code>platform-tools</code>文件夹</p></blockquote><p>方法一：因为安卓开发环境需要用到adb，安装过studio等软件的都自带的有<code>platform-tools</code>，它在<code>~/Library/Android/sdk/platform-tools</code>下，<br>方法二：<a href="https://developer.android.com/studio/releases/platform-tools.html" target="_blank" rel="noopener">简单粗暴，官网下载</a>,下载<code>platform-tools</code>文件夹。<br>方法三：先保证有brew包管理器，再执行<code>brew cask install android-platform-tools</code>即可。<br>2.配置环境变量<br>为方便adb的使用，添加环境变量。<br>iTerm输入<code>open -e .bash_profile</code>,打开配置文件。<br>添加<code>export PATH=${PATH}:~/Library/Android/sdk/platform-tools</code>即可。<br>3.冰箱的具体教程根据官方文档使用<br><a href="https://github.com/heruoxin/Ice-Box-Docs" target="_blank" rel="noopener">项目地址</a></p><h2 id="一：换源篇。"><a href="#一：换源篇。" class="headerlink" title="一：换源篇。"></a>一：换源篇。</h2><h3 id="shell换源"><a href="#shell换源" class="headerlink" title="shell换源"></a>shell换源</h3><p>众所周知，使用shell第一步就是换源，毕竟祖国有一面伟大的墙。此篇适用于各种shell（实测zsh，bash以及arm平台的termux）</p><h3 id="pip换源。"><a href="#pip换源。" class="headerlink" title="pip换源。"></a>pip换源。</h3><p><strong>1.查看根目录是否有.pip文件夹，没有就新建一个，然后在.pip 文件夹内新建一个pip.conf文件。</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> -a //查看<span class="token function">mkdir</span> .pip//新建文件夹<span class="token function">touch</span> pip.conf//新建文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>2.粘贴代码到pip.conf</strong></p><pre class="line-numbers language-bash"><code class="language-bash">//阿里<span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url <span class="token operator">=</span> http://mirrors.aliyun.com/pypi/simple/<span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host<span class="token operator">=</span>mirrors.aliyun.com//豆瓣<span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url <span class="token operator">=</span> http://pypi.douban.com/simple<span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host<span class="token operator">=</span>pypi.douban.com//清华（推荐）<span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url <span class="token operator">=</span> https://pypi.tuna.tsinghua.edu.cn/simple<span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host<span class="token operator">=</span>pypi.tuna.tsinghua.edu.cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="brew换源"><a href="#brew换源" class="headerlink" title="brew换源"></a>brew换源</h3><pre class="line-numbers language-bash"><code class="language-bash">// 替换brew.git:$ <span class="token function">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>"</span>// 中国科大:$ <span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/brew.git// 清华大学:$ <span class="token function">git</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git// 替换homebrew-core.git:$ <span class="token function">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core"</span>// 中国科大:$ <span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git// 清华大学: <span class="token function">git</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git// 替换homebrew-bottles:// 中国科大:$ <span class="token keyword">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> <span class="token operator">>></span> ~/.bash_profile$ <span class="token function">source</span> ~/.bash_profile// 清华大学:$ <span class="token keyword">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles'</span> <span class="token operator">>></span> ~/.bash_profile$ <span class="token function">source</span> ~/.bash_profile// 应用生效:$ brew update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二：报错篇"><a href="#二：报错篇" class="headerlink" title="二：报错篇"></a>二：报错篇</h2><p><strong>python3</strong><br><em>报错：</em>ModuleNotFoundError: No module named ‘PIL’<br><em>解决方法</em><br>运行安装pillow命令:</p><pre class="line-numbers language-bash"><code class="language-bash">pip <span class="token function">install</span> pillow//如果运行时显示Requirement already satisfied: pillow <span class="token keyword">in</span> /anaconda3/lib/python3.7/site-packages <span class="token punctuation">(</span>5.4.1<span class="token punctuation">)</span>//表示已经安装过了，这时可以先卸载，获取最新的pillow//运行卸载命令: pip uninstall pillow//然后再次运行安装命令pip <span class="token function">install</span> pillow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github+coding+matry搭建双路博客</title>
      <link href="/2020/05/27/hexo-github-da-jian-bo-ke/"/>
      <url>/2020/05/27/hexo-github-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一次正式搭建个人博客，想通过它来记录一些学习过程中经常遗忘的代码和一些折腾的过程。搭建博客的方式和工具都有很多种选择，我采用的是Hexo+github的方式进行搭建。选择这种方式的原因很简单，我也考虑过采用反向穿透配合nginx的方式进行搭建，无奈服务器的价钱都不便宜。得益于github不收费，并且速度还可以，所以对于我来时是个更好的选择。</p><h2 id="魔改"><a href="#魔改" class="headerlink" title="魔改"></a>魔改</h2><blockquote><p>本文不讲具体的每一步细节，毕竟网上这种文章太多了，只记录一些好玩的魔改。</p></blockquote><h3 id="调色篇"><a href="#调色篇" class="headerlink" title="调色篇"></a>调色篇</h3><p>好玩的工具：<a href="http://tools.jb51.net/static/colorpicker/" target="_blank" rel="noopener">在线颜色选择器 | RGB颜色查询对照表</a><br>主要针对<code>themes\Matery\source\css\matery.css</code>,<code>themes\Matery\layout\_partial\bg-cover-content.ejs</code>和<code>themes\Matery\layout\_partial\post-detail-toc.ejs</code>这三个文件的修改。</p><h4 id="matery-css文件"><a href="#matery-css文件" class="headerlink" title="matery.css文件"></a>matery.css文件</h4><blockquote><p>主页的渐变动画去除</p></blockquote><p>打开<code>matery.css</code>文件搜索<code>.bg-cover:after</code>注释掉所在代码块即可。</p><blockquote><p>博客背景壁纸修改</p></blockquote><p><code>matery.css</code>中搜索<code>body</code>,其中<code>url(****)</code>括号内替换为自己想要的效果，或者喜欢纯色直接修改<code>rgna</code>括号内的rgb值即可。</p><h4 id="bg-cover-content-ejs文件"><a href="#bg-cover-content-ejs文件" class="headerlink" title="bg-cover-content.ejs文件"></a>bg-cover-content.ejs文件</h4><blockquote><p>修改主页轮播图</p></blockquote><p>1.主题配置文件_config.yml中取消掉或者固定显示轮播图。<br>2.bg-cover-content.ejs中搜索<code>&lt;% if (theme.banner.enable) { %&gt;&lt;script&gt;</code>所在代码块的<code>url（****）</code>其中<em>**</em>替换为自己想要的图片链接地址即可。</p><h4 id="post-detail-toc-ejs"><a href="#post-detail-toc-ejs" class="headerlink" title="post-detail-toc.ejs"></a>post-detail-toc.ejs</h4><blockquote><p>文章侧旁目录背景颜色</p></blockquote><p>搜索代码 <code>.toc-widget {width: 345px;padding-left: 20px;</code>，更改<code>background-color:</code>属性的rgb值即可。</p><h2 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h2><blockquote><p>github出现The CNAME godweiyang.com is already taken.</p></blockquote><p>解决办法：删除站点所有<code>CNAME</code>文件。</p><blockquote><p>不蒜子统计计数本地数据不正常</p></blockquote><p>解决：没提交。。。。</p><blockquote><p>不蒜子与love2d动画冲突</p></blockquote><p>首先为便于修改，把不蒜子的插件下载到本地，我的在<code>/Hexo/themes/matery/source/libs/others</code>,搜索<code>b.style.display=&quot;none&quot;</code>,把<code>none</code>去掉即可。</p><blockquote><p>文章加密</p></blockquote><p>文章中设置SHA256加密的password值，并在——config.yml激活加密功能<br><a href="http://www.jsons.cn/sha/" target="_blank" rel="noopener">在线加密</a></p><p>链接：<a href="https://www.baidu.com/s?wd=%E5%A6%82%E4%BD%95hexo%2Bgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2&tn=84053098_3_dg&ie=utf-8/" title="超详细Hexo+Github博客搭建小白教程" target="_blank" rel="noopener">超详细Hexo+Github博客搭建小白教程</a> 。。</p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第一个博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
